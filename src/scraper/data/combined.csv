DSA|Title|Level|Question|YoutubeLink
Arrays & Hashing|Contains Duplicate|Easy|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears <strong>at least twice</strong> in the array, and return <code>false</code> if every element is distinct.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3,1] <strong>Output:</strong> true </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3,4] <strong>Output:</strong> false </pre><p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [1,1,1,3,3,4,3,2,4,2] <strong>Output:</strong> true </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> 	<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=3OamzN90kPg
Arrays & Hashing|Valid Anagram|Easy|<div class="elfjS" data-track-load="description_content"><p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p> <p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "anagram", t = "nagaram" <strong>Output:</strong> true </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "rat", t = "car" <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li> 	<li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p> </div>|https://www.youtube.com/watch?v=9UtInBqnCgA
Arrays & Hashing|Two Sum|Easy|<div class="elfjS" data-track-load="description_content"><p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p> <p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p> <p>You can return the answer in any order.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [2,7,11,15], target = 9 <strong>Output:</strong> [0,1] <strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [3,2,4], target = 6 <strong>Output:</strong> [1,2] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [3,3], target = 6 <strong>Output:</strong> [0,1] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> 	<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> 	<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> 	<li><strong>Only one valid answer exists.</strong></li> </ul> <p>&nbsp;</p> <strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face="monospace">&nbsp;</font>time complexity?</div>|https://www.youtube.com/watch?v=KLlXCFG5TnA
Arrays & Hashing|Group Anagrams|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p> <p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> strs = ["eat","tea","tan","ate","nat","bat"] <strong>Output:</strong> [["bat"],["nat","tan"],["ate","eat","tea"]] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> strs = [""] <strong>Output:</strong> [[""]] </pre><p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> strs = ["a"] <strong>Output:</strong> [["a"]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= strs[i].length &lt;= 100</code></li> 	<li><code>strs[i]</code> consists of lowercase English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=vzdNOK2oB2E
Arrays & Hashing|Top K Frequent Elements|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2 <strong>Output:</strong> [1,2] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1], k = 1 <strong>Output:</strong> [1] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> 	<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li> 	<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> Your algorithm's time complexity must be better than <code>O(n log n)</code>, where n is the array's size.</p> </div>|https://www.youtube.com/watch?v=YPTqKIgVk-k
Arrays & Hashing|Encode and Decode Strings|Medium|<div class="elfjS" data-track-load="description_content"></div>|https://www.youtube.com/watch?v=B1k_sxOSgv8
Arrays & Hashing|Product of Array Except Self|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p> <p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p> <p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3,4] <strong>Output:</strong> [24,12,8,6] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [-1,1,0,-3,3] <strong>Output:</strong> [0,0,9,0,0] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> 	<li><code>-30 &lt;= nums[i] &lt;= 30</code></li> 	<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)</code>&nbsp;extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p> </div>|https://www.youtube.com/watch?v=bNvIQI2wAjk
Arrays & Hashing|Valid Sudoku|Medium|<div class="elfjS" data-track-load="description_content"><p>Determine if a&nbsp;<code>9 x 9</code> Sudoku board&nbsp;is valid.&nbsp;Only the filled cells need to be validated&nbsp;<strong>according to the following rules</strong>:</p> <ol> 	<li>Each row&nbsp;must contain the&nbsp;digits&nbsp;<code>1-9</code> without repetition.</li> 	<li>Each column must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li> 	<li>Each of the nine&nbsp;<code>3 x 3</code> sub-boxes of the grid must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li> </ol> <p><strong>Note:</strong></p> <ul> 	<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li> 	<li>Only the filled cells need to be validated according to the mentioned&nbsp;rules.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" style="height: 250px; width: 250px;"> <pre><strong>Input:</strong> board =  [["5","3",".",".","7",".",".",".","."] ,["6",".",".","1","9","5",".",".","."] ,[".","9","8",".",".",".",".","6","."] ,["8",".",".",".","6",".",".",".","3"] ,["4",".",".","8",".","3",".",".","1"] ,["7",".",".",".","2",".",".",".","6"] ,[".","6",".",".",".",".","2","8","."] ,[".",".",".","4","1","9",".",".","5"] ,[".",".",".",".","8",".",".","7","9"]] <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> board =  [["8","3",".",".","7",".",".",".","."] ,["6",".",".","1","9","5",".",".","."] ,[".","9","8",".",".",".",".","6","."] ,["8",".",".",".","6",".",".",".","3"] ,["4",".",".","8",".","3",".",".","1"] ,["7",".",".",".","2",".",".",".","6"] ,[".","6",".",".",".",".","2","8","."] ,[".",".",".","4","1","9",".",".","5"] ,[".",".",".",".","8",".",".","7","9"]] <strong>Output:</strong> false <strong>Explanation:</strong> Same as Example 1, except with the <strong>5</strong> in the top left corner being modified to <strong>8</strong>. Since there are two 8's in the top left 3x3 sub-box, it is invalid. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>board.length == 9</code></li> 	<li><code>board[i].length == 9</code></li> 	<li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>'.'</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=TjFXEUCMqI8
Arrays & Hashing|Longest Consecutive Sequence|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p> <p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [100,4,200,1,3,2] <strong>Output:</strong> 4 <strong>Explanation:</strong> The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Therefore its length is 4. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [0,3,7,2,5,8,4,6,0,1] <strong>Output:</strong> 9 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> 	<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=P6RZZMu_maU
Two Pointers|Valid Palindrome|Easy|<div class="elfjS" data-track-load="description_content"><p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p> <p>Given a string <code>s</code>, return <code>true</code><em> if it is a <strong>palindrome</strong>, or </em><code>false</code><em> otherwise</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "A man, a plan, a canal: Panama" <strong>Output:</strong> true <strong>Explanation:</strong> "amanaplanacanalpanama" is a palindrome. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "race a car" <strong>Output:</strong> false <strong>Explanation:</strong> "raceacar" is not a palindrome. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = " " <strong>Output:</strong> true <strong>Explanation:</strong> s is an empty string "" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li> 	<li><code>s</code> consists only of printable ASCII characters.</li> </ul> </div>|https://www.youtube.com/watch?v=jJXJ16kPFWg
Two Pointers|Two Sum II Input Array Is Sorted|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a <strong>1-indexed</strong> array of integers <code>numbers</code> that is already <strong><em>sorted in non-decreasing order</em></strong>, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be <code>numbers[index<sub>1</sub>]</code> and <code>numbers[index<sub>2</sub>]</code> where <code>1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;= numbers.length</code>.</p> <p>Return<em> the indices of the two numbers, </em><code>index<sub>1</sub></code><em> and </em><code>index<sub>2</sub></code><em>, <strong>added by one</strong> as an integer array </em><code>[index<sub>1</sub>, index<sub>2</sub>]</code><em> of length 2.</em></p> <p>The tests are generated such that there is <strong>exactly one solution</strong>. You <strong>may not</strong> use the same element twice.</p> <p>Your solution must use only constant extra space.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> numbers = [<u>2</u>,<u>7</u>,11,15], target = 9 <strong>Output:</strong> [1,2] <strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore, index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> numbers = [<u>2</u>,3,<u>4</u>], target = 6 <strong>Output:</strong> [1,3] <strong>Explanation:</strong> The sum of 2 and 4 is 6. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3]. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> numbers = [<u>-1</u>,<u>0</u>], target = -1 <strong>Output:</strong> [1,2] <strong>Explanation:</strong> The sum of -1 and 0 is -1. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2]. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li> 	<li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li> 	<li><code>numbers</code> is sorted in <strong>non-decreasing order</strong>.</li> 	<li><code>-1000 &lt;= target &lt;= 1000</code></li> 	<li>The tests are generated such that there is <strong>exactly one solution</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=cQ1Oz4ckceM
Two Pointers|3Sum|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [-1,0,1,2,-1,-4] <strong>Output:</strong> [[-1,-1,2],[-1,0,1]] <strong>Explanation:</strong>  nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [0,1,1] <strong>Output:</strong> [] <strong>Explanation:</strong> The only possible triplet does not sum up to 0. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [0,0,0] <strong>Output:</strong> [[0,0,0]] <strong>Explanation:</strong> The only possible triplet sums up to 0. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>3 &lt;= nums.length &lt;= 3000</code></li> 	<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=jzZsG8n2R9A
Two Pointers|Container With Most Water|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p> <p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p> <p>Return <em>the maximum amount of water a container can store</em>.</p> <p><strong>Notice</strong> that you may not slant the container.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" style="width: 600px; height: 287px;"> <pre><strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7] <strong>Output:</strong> 49 <strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> height = [1,1] <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == height.length</code></li> 	<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> 	<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=UuiTKBwPgAo
Two Pointers|Trapping Rain Water|Hard|<div class="elfjS" data-track-load="description_content"><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" style="width: 412px; height: 161px;"> <pre><strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1] <strong>Output:</strong> 6 <strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> height = [4,2,0,3,2,5] <strong>Output:</strong> 9 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == height.length</code></li> 	<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> 	<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=ZI2z5pq0TqA
Sliding Window|Best Time to Buy And Sell Stock|Easy|<div class="elfjS" data-track-load="description_content"><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p> <p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p> <p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> prices = [7,1,5,3,6,4] <strong>Output:</strong> 5 <strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> prices = [7,6,4,3,1] <strong>Output:</strong> 0 <strong>Explanation:</strong> In this case, no transactions are done and the max profit = 0. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li> 	<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=1pkOgXD63yU
Sliding Window|Longest Substring Without Repeating Characters|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a string <code>s</code>, find the length of the <strong>longest</strong> <span data-keyword="substring-nonempty" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:ro:"><div><strong>substring</strong></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(366px, 215px);"></div></div></div></span> without repeating characters.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "abcabcbb" <strong>Output:</strong> 3 <strong>Explanation:</strong> The answer is "abc", with the length of 3. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "bbbbb" <strong>Output:</strong> 1 <strong>Explanation:</strong> The answer is "b", with the length of 1. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = "pwwkew" <strong>Output:</strong> 3 <strong>Explanation:</strong> The answer is "wke", with the length of 3. Notice that the answer must be a substring, "pwke" is a subsequence and not a substring. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> 	<li><code>s</code> consists of English letters, digits, symbols and spaces.</li> </ul> </div>|https://www.youtube.com/watch?v=wiGpQwVHdE0
Sliding Window|Longest Repeating Character Replacement|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p> <p>Return <em>the length of the longest substring containing the same letter you can get after performing the above operations</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "ABAB", k = 2 <strong>Output:</strong> 4 <strong>Explanation:</strong> Replace the two 'A's with two 'B's or vice versa. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "AABABBA", k = 1 <strong>Output:</strong> 4 <strong>Explanation:</strong> Replace the one 'A' in the middle with 'B' and form "AABBBBA". The substring "BBBB" has the longest repeating letters, which is 4. There may exists other ways to achieve this answer too.</pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> 	<li><code>s</code> consists of only uppercase English letters.</li> 	<li><code>0 &lt;= k &lt;= s.length</code></li> </ul> </div>|https://www.youtube.com/watch?v=gqXU1UyA8pk
Sliding Window|Permutation In String|Medium|<div class="elfjS" data-track-load="description_content"><p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code><em> if </em><code>s2</code><em> contains a permutation of </em><code>s1</code><em>, or </em><code>false</code><em> otherwise</em>.</p> <p>In other words, return <code>true</code> if one of <code>s1</code>'s permutations is the substring of <code>s2</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s1 = "ab", s2 = "eidbaooo" <strong>Output:</strong> true <strong>Explanation:</strong> s2 contains one permutation of s1 ("ba"). </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s1 = "ab", s2 = "eidboaoo" <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li> 	<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=UbyhOgBN834
Sliding Window|Minimum Window Substring|Hard|<div class="elfjS" data-track-load="description_content"><p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window</strong></em> <span data-keyword="substring-nonempty" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:ro:"><div><strong><em>substring</em></strong></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(116px, 204px);"></div></div></div></span><em> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window</em>. If there is no such substring, return <em>the empty string </em><code>""</code>.</p> <p>The testcases will be generated such that the answer is <strong>unique</strong>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "ADOBECODEBANC", t = "ABC" <strong>Output:</strong> "BANC" <strong>Explanation:</strong> The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "a", t = "a" <strong>Output:</strong> "a" <strong>Explanation:</strong> The entire string s is the minimum window. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = "a", t = "aa" <strong>Output:</strong> "" <strong>Explanation:</strong> Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == s.length</code></li> 	<li><code>n == t.length</code></li> 	<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> 	<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?</p> </div>|https://www.youtube.com/watch?v=jSto0O4AJbM
Sliding Window|Sliding Window Maximum|Hard|<div class="elfjS" data-track-load="description_content"><p>You are given an array of integers&nbsp;<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return <em>the max sliding window</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3 <strong>Output:</strong> [3,3,5,5,6,7] <strong>Explanation:</strong>  Window position                Max ---------------               ----- [1  3  -1] -3  5  3  6  7       <strong>3</strong>  1 [3  -1  -3] 5  3  6  7       <strong>3</strong>  1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>  1  3  -1 [-3  5  3] 6  7       <strong>5</strong>  1  3  -1  -3 [5  3  6] 7       <strong>6</strong>  1  3  -1  -3  5 [3  6  7]      <strong>7</strong> </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1], k = 1 <strong>Output:</strong> [1] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> 	<li><code>1 &lt;= k &lt;= nums.length</code></li> </ul> </div>|https://www.youtube.com/watch?v=DfljaUwZsOk
Stack|Valid Parentheses|Easy|<div class="elfjS" data-track-load="description_content"><p>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p> <p>An input string is valid if:</p> <ol> 	<li>Open brackets must be closed by the same type of brackets.</li> 	<li>Open brackets must be closed in the correct order.</li> 	<li>Every close bracket has a corresponding open bracket of the same type.</li> </ol> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "()" <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "()[]{}" <strong>Output:</strong> true </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = "(]" <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> 	<li><code>s</code> consists of parentheses only <code>'()[]{}'</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=WTzjTskDFMg
Stack|Min Stack|Medium|<div class="elfjS" data-track-load="description_content"><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p> <p>Implement the <code>MinStack</code> class:</p> <ul> 	<li><code>MinStack()</code> initializes the stack object.</li> 	<li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li> 	<li><code>void pop()</code> removes the element on the top of the stack.</li> 	<li><code>int top()</code> gets the top element of the stack.</li> 	<li><code>int getMin()</code> retrieves the minimum element in the stack.</li> </ul> <p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input</strong> ["MinStack","push","push","push","getMin","pop","top","getMin"] [[],[-2],[0],[-3],[],[],[],[]] <strong>Output</strong> [null,null,null,null,-3,null,0,-2] <strong>Explanation</strong> MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top();    // return 0 minStack.getMin(); // return -2 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li> 	<li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on <strong>non-empty</strong> stacks.</li> 	<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=qkLl7nAwDPo
Stack|Evaluate Reverse Polish Notation|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank">Reverse Polish Notation</a>.</p> <p>Evaluate the expression. Return <em>an integer that represents the value of the expression</em>.</p> <p><strong>Note</strong> that:</p> <ul> 	<li>The valid operators are <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, and <code>'/'</code>.</li> 	<li>Each operand may be an integer or another expression.</li> 	<li>The division between two integers always <strong>truncates toward zero</strong>.</li> 	<li>There will not be any division by zero.</li> 	<li>The input represents a valid arithmetic expression in a reverse polish notation.</li> 	<li>The answer and all the intermediate calculations can be represented in a <strong>32-bit</strong> integer.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> tokens = ["2","1","+","3","*"] <strong>Output:</strong> 9 <strong>Explanation:</strong> ((2 + 1) * 3) = 9 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> tokens = ["4","13","5","/","+"] <strong>Output:</strong> 6 <strong>Explanation:</strong> (4 + (13 / 5)) = 6 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"] <strong>Output:</strong> 22 <strong>Explanation:</strong> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li> 	<li><code>tokens[i]</code> is either an operator: <code>"+"</code>, <code>"-"</code>, <code>"*"</code>, or <code>"/"</code>, or an integer in the range <code>[-200, 200]</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=iu0082c4HDE
Stack|Generate Parentheses|Medium|<div class="elfjS" data-track-load="description_content"><p>Given <code>n</code> pairs of parentheses, write a function to <em>generate all combinations of well-formed parentheses</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> n = 3 <strong>Output:</strong> ["((()))","(()())","(())()","()(())","()()()"] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> n = 1 <strong>Output:</strong> ["()"] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= n &lt;= 8</code></li> </ul> </div>|https://www.youtube.com/watch?v=s9fokUqJ76A
Stack|Daily Temperatures|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>i<sup>th</sup></code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> temperatures = [73,74,75,71,69,72,76,73] <strong>Output:</strong> [1,1,4,2,1,1,0,0] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> temperatures = [30,40,50,60] <strong>Output:</strong> [1,1,1,0] </pre><p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> temperatures = [30,60,90] <strong>Output:</strong> [1,1,0] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;=&nbsp;temperatures.length &lt;= 10<sup>5</sup></code></li> 	<li><code>30 &lt;=&nbsp;temperatures[i] &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=cTBiBSnjO3c
Stack|Car Fleet|Medium|<div class="elfjS" data-track-load="description_content"><p>There are <code>n</code> cars going to the same destination along a one-lane road. The destination is <code>target</code> miles away.</p> <p>You are given two integer array <code>position</code> and <code>speed</code>, both of length <code>n</code>, where <code>position[i]</code> is the position of the <code>i<sup>th</sup></code> car and <code>speed[i]</code> is the speed of the <code>i<sup>th</sup></code> car (in miles per hour).</p> <p>A car can never pass another car ahead of it, but it can catch up to it&nbsp;and drive bumper to bumper <strong>at the same speed</strong>. The faster car will <strong>slow down</strong> to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).</p> <p>A <strong>car fleet</strong> is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.</p> <p>If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.</p> <p>Return <em>the <strong>number of car fleets</strong> that will arrive at the destination</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] <strong>Output:</strong> 3 <strong>Explanation:</strong> The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The car starting at 0 does not catch up to any other car, so it is a fleet by itself. The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target. Note that no other cars meet these fleets before the destination, so the answer is 3. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> target = 10, position = [3], speed = [3] <strong>Output:</strong> 1 <strong>Explanation:</strong> There is only one car, hence there is only one fleet. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> target = 100, position = [0,2,4], speed = [4,2,1] <strong>Output:</strong> 1 <strong>Explanation:</strong> The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2. Then, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == position.length == speed.length</code></li> 	<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> 	<li><code>0 &lt; target &lt;= 10<sup>6</sup></code></li> 	<li><code>0 &lt;= position[i] &lt; target</code></li> 	<li>All the values of <code>position</code> are <strong>unique</strong>.</li> 	<li><code>0 &lt; speed[i] &lt;= 10<sup>6</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=Pr6T-3yB9RM
Stack|Largest Rectangle In Histogram|Hard|<div class="elfjS" data-track-load="description_content"><p>Given an array of integers <code>heights</code> representing the histogram's bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg" style="width: 522px; height: 242px;"> <pre><strong>Input:</strong> heights = [2,1,5,6,2,3] <strong>Output:</strong> 10 <strong>Explanation:</strong> The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg" style="width: 202px; height: 362px;"> <pre><strong>Input:</strong> heights = [2,4] <strong>Output:</strong> 4 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li> 	<li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=zx5Sw9130L0
Binary Search|Binary Search|Easy|<div class="elfjS" data-track-load="description_content"><p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 9 <strong>Output:</strong> 4 <strong>Explanation:</strong> 9 exists in nums and its index is 4 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [-1,0,3,5,9,12], target = 2 <strong>Output:</strong> -1 <strong>Explanation:</strong> 2 does not exist in nums so return -1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> 	<li><code>-10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup></code></li> 	<li>All the integers in <code>nums</code> are <strong>unique</strong>.</li> 	<li><code>nums</code> is sorted in ascending order.</li> </ul> </div>|https://www.youtube.com/watch?v=s4DPM8ct1pI
Binary Search|Search a 2D Matrix|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p> <ul> 	<li>Each row is sorted in non-decreasing order.</li> 	<li>The first integer of each row is greater than the last integer of the previous row.</li> </ul> <p>Given an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code> <em>or</em> <code>false</code> <em>otherwise</em>.</p> <p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg" style="width: 322px; height: 242px;"> <pre><strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg" style="width: 322px; height: 242px;"> <pre><strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == matrix.length</code></li> 	<li><code>n == matrix[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 100</code></li> 	<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=Ber2pi2C0j0
Binary Search|Koko Eating Bananas|Medium|<div class="elfjS" data-track-load="description_content"><p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the <code>i<sup>th</sup></code> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p> <p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p> <p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p> <p>Return <em>the minimum integer</em> <code>k</code> <em>such that she can eat all the bananas within</em> <code>h</code> <em>hours</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> piles = [3,6,7,11], h = 8 <strong>Output:</strong> 4 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> piles = [30,11,23,4,20], h = 5 <strong>Output:</strong> 30 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> piles = [30,11,23,4,20], h = 6 <strong>Output:</strong> 23 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= piles.length &lt;= 10<sup>4</sup></code></li> 	<li><code>piles.length &lt;= h &lt;= 10<sup>9</sup></code></li> 	<li><code>1 &lt;= piles[i] &lt;= 10<sup>9</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=U2SozAs9RzA
Binary Search|Find Minimum In Rotated Sorted Array|Medium|<div class="elfjS" data-track-load="description_content"><p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p> <ul> 	<li><code>[4,5,6,7,0,1,2]</code> if it was rotated <code>4</code> times.</li> 	<li><code>[0,1,2,4,5,6,7]</code> if it was rotated <code>7</code> times.</li> </ul> <p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p> <p>Given the sorted rotated array <code>nums</code> of <strong>unique</strong> elements, return <em>the minimum element of this array</em>.</p> <p>You must write an algorithm that runs in&nbsp;<code>O(log n) time.</code></p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [3,4,5,1,2] <strong>Output:</strong> 1 <strong>Explanation:</strong> The original array was [1,2,3,4,5] rotated 3 times. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2] <strong>Output:</strong> 0 <strong>Explanation:</strong> The original array was [0,1,2,4,5,6,7] and it was rotated 4 times. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [11,13,15,17] <strong>Output:</strong> 11 <strong>Explanation:</strong> The original array was [11,13,15,17] and it was rotated 4 times.  </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == nums.length</code></li> 	<li><code>1 &lt;= n &lt;= 5000</code></li> 	<li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> 	<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li> 	<li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li> </ul> </div>|https://www.youtube.com/watch?v=nIVW4P8b1VA
Binary Search|Search In Rotated Sorted Array|Medium|<div class="elfjS" data-track-load="description_content"><p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p> <p>Prior to being passed to your function, <code>nums</code> is <strong>possibly rotated</strong> at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p> <p>Given the array <code>nums</code> <strong>after</strong> the possible rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0 <strong>Output:</strong> 4 </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3 <strong>Output:</strong> -1 </pre><p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [1], target = 0 <strong>Output:</strong> -1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 5000</code></li> 	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> 	<li>All values of <code>nums</code> are <strong>unique</strong>.</li> 	<li><code>nums</code> is an ascending array that is possibly rotated.</li> 	<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=U8XENwh8Oy8
Binary Search|Time Based Key Value Store|Medium|<div class="elfjS" data-track-load="description_content"><p>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.</p> <p>Implement the <code>TimeMap</code> class:</p> <ul> 	<li><code>TimeMap()</code> Initializes the object of the data structure.</li> 	<li><code>void set(String key, String value, int timestamp)</code> Stores the key <code>key</code> with the value <code>value</code> at the given time <code>timestamp</code>.</li> 	<li><code>String get(String key, int timestamp)</code> Returns a value such that <code>set</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>""</code>.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input</strong> ["TimeMap", "set", "get", "get", "set", "get", "get"] [[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]] <strong>Output</strong> [null, null, "bar", "bar", null, "bar2", "bar2"] <strong>Explanation</strong> TimeMap timeMap = new TimeMap(); timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1. timeMap.get("foo", 1);         // return "bar" timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar". timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4. timeMap.get("foo", 4);         // return "bar2" timeMap.get("foo", 5);         // return "bar2" </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= key.length, value.length &lt;= 100</code></li> 	<li><code>key</code> and <code>value</code> consist of lowercase English letters and digits.</li> 	<li><code>1 &lt;= timestamp &lt;= 10<sup>7</sup></code></li> 	<li>All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</li> 	<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>set</code> and <code>get</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=fu2cD_6E8Hw
Binary Search|Median of Two Sorted Arrays|Hard|<div class="elfjS" data-track-load="description_content"><p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p> <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums1 = [1,3], nums2 = [2] <strong>Output:</strong> 2.00000 <strong>Explanation:</strong> merged array = [1,2,3] and median is 2. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums1 = [1,2], nums2 = [3,4] <strong>Output:</strong> 2.50000 <strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>nums1.length == m</code></li> 	<li><code>nums2.length == n</code></li> 	<li><code>0 &lt;= m &lt;= 1000</code></li> 	<li><code>0 &lt;= n &lt;= 1000</code></li> 	<li><code>1 &lt;= m + n &lt;= 2000</code></li> 	<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=q6IEA26hvXc
Linked List|Reverse Linked List|Easy|<div class="elfjS" data-track-load="description_content"><p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" style="width: 542px; height: 222px;"> <pre><strong>Input:</strong> head = [1,2,3,4,5] <strong>Output:</strong> [5,4,3,2,1] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" style="width: 182px; height: 222px;"> <pre><strong>Input:</strong> head = [1,2] <strong>Output:</strong> [2,1] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> head = [] <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li> 	<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p> </div>|https://www.youtube.com/watch?v=G0_I-ZF0S38
Linked List|Merge Two Sorted Lists|Easy|<div class="elfjS" data-track-load="description_content"><p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p> <p>Merge the two lists into one <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p> <p>Return <em>the head of the merged linked list</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" style="width: 662px; height: 302px;"> <pre><strong>Input:</strong> list1 = [1,2,4], list2 = [1,3,4] <strong>Output:</strong> [1,1,2,3,4,4] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> list1 = [], list2 = [] <strong>Output:</strong> [] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> list1 = [], list2 = [0] <strong>Output:</strong> [0] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li> 	<li><code>-100 &lt;= Node.val &lt;= 100</code></li> 	<li>Both <code>list1</code> and <code>list2</code> are sorted in <strong>non-decreasing</strong> order.</li> </ul> </div>|https://www.youtube.com/watch?v=XIdigk956u0
Linked List|Reorder List|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given the head of a singly linked-list. The list can be represented as:</p> <pre>L<sub>0</sub> → L<sub>1</sub> → … → L<sub>n - 1</sub> → L<sub>n</sub> </pre> <p><em>Reorder the list to be on the following form:</em></p> <pre>L<sub>0</sub> → L<sub>n</sub> → L<sub>1</sub> → L<sub>n - 1</sub> → L<sub>2</sub> → L<sub>n - 2</sub> → … </pre> <p>You may not modify the values in the list's nodes. Only nodes themselves may be changed.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg" style="width: 422px; height: 222px;"> <pre><strong>Input:</strong> head = [1,2,3,4] <strong>Output:</strong> [1,4,2,3] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg" style="width: 542px; height: 222px;"> <pre><strong>Input:</strong> head = [1,2,3,4,5] <strong>Output:</strong> [1,5,2,4,3] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the list is in the range <code>[1, 5 * 10<sup>4</sup>]</code>.</li> 	<li><code>1 &lt;= Node.val &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=S5bfdUTrKLM
Linked List|Remove Nth Node From End of List|Medium|<div class="elfjS" data-track-load="description_content"><p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" style="width: 542px; height: 222px;"> <pre><strong>Input:</strong> head = [1,2,3,4,5], n = 2 <strong>Output:</strong> [1,2,3,5] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> head = [1], n = 1 <strong>Output:</strong> [] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> head = [1,2], n = 1 <strong>Output:</strong> [1] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the list is <code>sz</code>.</li> 	<li><code>1 &lt;= sz &lt;= 30</code></li> 	<li><code>0 &lt;= Node.val &lt;= 100</code></li> 	<li><code>1 &lt;= n &lt;= sz</code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> Could you do this in one pass?</p> </div>|https://www.youtube.com/watch?v=XVuQxVej6y8
Linked List|Copy List With Random Pointer|Medium|<div class="elfjS" data-track-load="description_content"><p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p> <p>Construct a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p> <p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p> <p>Return <em>the head of the copied linked list</em>.</p> <p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p> <ul> 	<li><code>val</code>: an integer representing <code>Node.val</code></li> 	<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li> </ul> <p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/e1.png" style="width: 700px; height: 142px;"> <pre><strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]] <strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/e2.png" style="width: 700px; height: 114px;"> <pre><strong>Input:</strong> head = [[1,1],[2,1]] <strong>Output:</strong> [[1,1],[2,1]] </pre> <p><strong class="example">Example 3:</strong></p> <p><strong><img alt="" src="https://assets.leetcode.com/uploads/2019/12/18/e3.png" style="width: 700px; height: 122px;"></strong></p> <pre><strong>Input:</strong> head = [[3,null],[3,0],[3,null]] <strong>Output:</strong> [[3,null],[3,0],[3,null]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= n &lt;= 1000</code></li> 	<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> 	<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li> </ul> </div>|https://www.youtube.com/watch?v=5Y2EiZST97Y
Linked List|Add Two Numbers|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" style="width: 483px; height: 342px;"> <pre><strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4] <strong>Output:</strong> [7,0,8] <strong>Explanation:</strong> 342 + 465 = 807. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> l1 = [0], l2 = [0] <strong>Output:</strong> [0] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] <strong>Output:</strong> [8,9,9,9,0,0,0,1] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li> 	<li><code>0 &lt;= Node.val &lt;= 9</code></li> 	<li>It is guaranteed that the list represents a number that does not have leading zeros.</li> </ul> </div>|https://www.youtube.com/watch?v=wgFPrzTjm7s
Linked List|Linked List Cycle|Easy|<div class="elfjS" data-track-load="description_content"><p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the&nbsp;<code>next</code>&nbsp;pointer. Internally, <code>pos</code>&nbsp;is used to denote the index of the node that&nbsp;tail's&nbsp;<code>next</code>&nbsp;pointer is connected to.&nbsp;<strong>Note that&nbsp;<code>pos</code>&nbsp;is not passed as a parameter</strong>.</p> <p>Return&nbsp;<code>true</code><em> if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" style="width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;"> <pre><strong>Input:</strong> head = [3,2,0,-4], pos = 1 <strong>Output:</strong> true <strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" style="width: 141px; height: 74px;"> <pre><strong>Input:</strong> head = [1,2], pos = 0 <strong>Output:</strong> true <strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node. </pre> <p><strong class="example">Example 3:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" style="width: 45px; height: 45px;"> <pre><strong>Input:</strong> head = [1], pos = -1 <strong>Output:</strong> false <strong>Explanation:</strong> There is no cycle in the linked list. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li> 	<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> 	<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p> </div>|https://www.youtube.com/watch?v=gBTe7lFR3vc
Linked List|Find The Duplicate Number|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array of integers <code>nums</code> containing&nbsp;<code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p> <p>There is only <strong>one repeated number</strong> in <code>nums</code>, return <em>this&nbsp;repeated&nbsp;number</em>.</p> <p>You must solve the problem <strong>without</strong> modifying the array <code>nums</code>&nbsp;and uses only constant extra space.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,3,4,2,2] <strong>Output:</strong> 2 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [3,1,3,4,2] <strong>Output:</strong> 3 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [3,3,3,3,3] <strong>Output:</strong> 3</pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> 	<li><code>nums.length == n + 1</code></li> 	<li><code>1 &lt;= nums[i] &lt;= n</code></li> 	<li>All the integers in <code>nums</code> appear only <strong>once</strong> except for <strong>precisely one integer</strong> which appears <strong>two or more</strong> times.</li> </ul> <p>&nbsp;</p> <p><b>Follow up:</b></p> <ul> 	<li>How can we prove that at least one duplicate number must exist in <code>nums</code>?</li> 	<li>Can you solve the problem in linear runtime complexity?</li> </ul> </div>|https://www.youtube.com/watch?v=wjYnzkAhcNk
Linked List|LRU Cache|Medium|<div class="elfjS" data-track-load="description_content"><p>Design a data structure that follows the constraints of a <strong><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU" target="_blank">Least Recently Used (LRU) cache</a></strong>.</p> <p>Implement the <code>LRUCache</code> class:</p> <ul> 	<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li> 	<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li> 	<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li> </ul> <p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input</strong> ["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] <strong>Output</strong> [null, null, null, 1, null, -1, null, -1, 3, 4] <strong>Explanation</strong> LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); // cache is {1=1} lRUCache.put(2, 2); // cache is {1=1, 2=2} lRUCache.get(1);    // return 1 lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} lRUCache.get(2);    // returns -1 (not found) lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3} lRUCache.get(1);    // return -1 (not found) lRUCache.get(3);    // return 3 lRUCache.get(4);    // return 4 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= capacity &lt;= 3000</code></li> 	<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li> 	<li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=7ABFKPK2hD4
Linked List|Merge K Sorted Lists|Hard|<div class="elfjS" data-track-load="description_content"><p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p> <p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]] <strong>Output:</strong> [1,1,2,3,4,4,5,6] <strong>Explanation:</strong> The linked-lists are: [   1-&gt;4-&gt;5,   1-&gt;3-&gt;4,   2-&gt;6 ] merging them into one sorted list: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> lists = [] <strong>Output:</strong> [] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> lists = [[]] <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>k == lists.length</code></li> 	<li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= lists[i].length &lt;= 500</code></li> 	<li><code>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></code></li> 	<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li> 	<li>The sum of <code>lists[i].length</code> will not exceed <code>10<sup>4</sup></code>.</li> </ul> </div>|https://www.youtube.com/watch?v=q5a5OiGbT6Q
Linked List|Reverse Nodes In K Group|Hard|<div class="elfjS" data-track-load="description_content"><p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return <em>the modified list</em>.</p> <p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p> <p>You may not alter the values in the list's nodes, only nodes themselves may be changed.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg" style="width: 542px; height: 222px;"> <pre><strong>Input:</strong> head = [1,2,3,4,5], k = 2 <strong>Output:</strong> [2,1,4,3,5] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg" style="width: 542px; height: 222px;"> <pre><strong>Input:</strong> head = [1,2,3,4,5], k = 3 <strong>Output:</strong> [3,2,1,4,5] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the list is <code>n</code>.</li> 	<li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li> 	<li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul> <p>&nbsp;</p> <p><strong>Follow-up:</strong> Can you solve the problem in <code>O(1)</code> extra memory space?</p> </div>|https://www.youtube.com/watch?v=1UOPsfP85V4
Trees|Invert Binary Tree|Easy|<div class="elfjS" data-track-load="description_content"><p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg" style="width: 500px; height: 165px;"> <pre><strong>Input:</strong> root = [4,2,7,1,3,6,9] <strong>Output:</strong> [4,7,2,9,6,3,1] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg" style="width: 500px; height: 120px;"> <pre><strong>Input:</strong> root = [2,1,3] <strong>Output:</strong> [2,3,1] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> root = [] <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> 	<li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=OnSn2XEQ4MY
Trees|Maximum Depth of Binary Tree|Easy|<div class="elfjS" data-track-load="description_content"><p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p> <p>A binary tree's <strong>maximum depth</strong>&nbsp;is the number of nodes along the longest path from the root node down to the farthest leaf node.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg" style="width: 400px; height: 277px;"> <pre><strong>Input:</strong> root = [3,9,20,null,null,15,7] <strong>Output:</strong> 3 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> root = [1,null,2] <strong>Output:</strong> 2 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> 	<li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=hTM3phVI6YQ
Trees|Diameter of Binary Tree|Easy|<div class="elfjS" data-track-load="description_content"><p>Given the <code>root</code> of a binary tree, return <em>the length of the <strong>diameter</strong> of the tree</em>.</p> <p>The <strong>diameter</strong> of a binary tree is the <strong>length</strong> of the longest path between any two nodes in a tree. This path may or may not pass through the <code>root</code>.</p> <p>The <strong>length</strong> of a path between two nodes is represented by the number of edges between them.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg" style="width: 292px; height: 302px;"> <pre><strong>Input:</strong> root = [1,2,3,4,5] <strong>Output:</strong> 3 <strong>Explanation:</strong> 3 is the length of the path [4,2,1,3] or [5,2,1,3]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> root = [1,2] <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> 	<li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=bkxqA8Rfv04
Trees|Balanced Binary Tree|Easy|<div class="elfjS" data-track-load="description_content"><p>Given a binary tree, determine if it is <span data-keyword="height-balanced" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:ro:"><div><strong>height-balanced</strong></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(319px, 183px);"></div></div></div></span>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg" style="width: 342px; height: 221px;"> <pre><strong>Input:</strong> root = [3,9,20,null,null,15,7] <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg" style="width: 452px; height: 301px;"> <pre><strong>Input:</strong> root = [1,2,2,3,3,null,null,4,4] <strong>Output:</strong> false </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> root = [] <strong>Output:</strong> true </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> 	<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=QfJsau0ItOY
Trees|Same Tree|Easy|<div class="elfjS" data-track-load="description_content"><p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p> <p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg" style="width: 622px; height: 182px;"> <pre><strong>Input:</strong> p = [1,2,3], q = [1,2,3] <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg" style="width: 382px; height: 182px;"> <pre><strong>Input:</strong> p = [1,2], q = [1,null,2] <strong>Output:</strong> false </pre> <p><strong class="example">Example 3:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg" style="width: 622px; height: 182px;"> <pre><strong>Input:</strong> p = [1,2,1], q = [1,1,2] <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li> 	<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=vRbbcKXCxOw
Trees|Subtree of Another Tree|Easy|<div class="elfjS" data-track-load="description_content"><p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of<code> subRoot</code> and <code>false</code> otherwise.</p> <p>A subtree of a binary tree <code>tree</code> is a tree that consists of a node in <code>tree</code> and all of this node's descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg" style="width: 532px; height: 400px;"> <pre><strong>Input:</strong> root = [3,4,5,1,2], subRoot = [4,1,2] <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg" style="width: 502px; height: 458px;"> <pre><strong>Input:</strong> root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2] <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the <code>root</code> tree is in the range <code>[1, 2000]</code>.</li> 	<li>The number of nodes in the <code>subRoot</code> tree is in the range <code>[1, 1000]</code>.</li> 	<li><code>-10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=E36O5SWp-LE
Trees|Lowest Common Ancestor of a Binary Search Tree|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p> <p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" style="width: 200px; height: 190px;"> <pre><strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 <strong>Output:</strong> 6 <strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6. </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png" style="width: 200px; height: 190px;"> <pre><strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 <strong>Output:</strong> 2 <strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> root = [2,1], p = 2, q = 1 <strong>Output:</strong> 2 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li> 	<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> 	<li>All <code>Node.val</code> are <strong>unique</strong>.</li> 	<li><code>p != q</code></li> 	<li><code>p</code> and <code>q</code> will exist in the BST.</li> </ul> </div>|https://www.youtube.com/watch?v=gs2LMfuOR9k
Trees|Binary Tree Level Order Traversal|Medium|<div class="elfjS" data-track-load="description_content"><p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes' values</em>. (i.e., from left to right, level by level).</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" style="width: 277px; height: 302px;"> <pre><strong>Input:</strong> root = [3,9,20,null,null,15,7] <strong>Output:</strong> [[3],[9,20],[15,7]] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> root = [1] <strong>Output:</strong> [[1]] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> root = [] <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> 	<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=6ZnyEApgFYg
Trees|Binary Tree Right Side View|Medium|<div class="elfjS" data-track-load="description_content"><p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg" style="width: 401px; height: 301px;"> <pre><strong>Input:</strong> root = [1,2,3,null,5,null,4] <strong>Output:</strong> [1,3,4] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> root = [1,null,3] <strong>Output:</strong> [1,3] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> root = [] <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> 	<li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=d4zLyf32e3I
Trees|Count Good Nodes In Binary Tree|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a binary tree <code>root</code>, a node <em>X</em> in the tree is named&nbsp;<strong>good</strong> if in the path from root to <em>X</em> there are no nodes with a value <em>greater than</em> X.</p> <p>Return the number of <strong>good</strong> nodes in the binary tree.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/04/02/test_sample_1.png" style="width: 263px; height: 156px;"></strong></p> <pre><strong>Input:</strong> root = [3,1,4,3,null,1,5] <strong>Output:</strong> 4 <strong>Explanation:</strong> Nodes in blue are <strong>good</strong>. Root Node (3) is always a good node. Node 4 -&gt; (3,4) is the maximum value in the path starting from the root. Node 5 -&gt; (3,4,5) is the maximum value in the path Node 3 -&gt; (3,1,3) is the maximum value in the path.</pre> <p><strong class="example">Example 2:</strong></p> <p><strong><img alt="" src="https://assets.leetcode.com/uploads/2020/04/02/test_sample_2.png" style="width: 157px; height: 161px;"></strong></p> <pre><strong>Input:</strong> root = [3,3,null,4,2] <strong>Output:</strong> 3 <strong>Explanation:</strong> Node 2 -&gt; (3, 3, 2) is not good, because "3" is higher than it.</pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> root = [1] <strong>Output:</strong> 1 <strong>Explanation:</strong> Root is considered as <strong>good</strong>.</pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the binary tree is in the range&nbsp;<code>[1, 10^5]</code>.</li> 	<li>Each node's value is between <code>[-10^4, 10^4]</code>.</li> </ul></div>|https://www.youtube.com/watch?v=7cp5imvDzl4
Trees|Validate Binary Search Tree|Medium|<div class="elfjS" data-track-load="description_content"><p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p> <p>A <strong>valid BST</strong> is defined as follows:</p> <ul> 	<li>The left <span data-keyword="subtree" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:ro:"><div>subtree</div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(120px, 257px);"></div></div></div></span> of a node contains only nodes with keys <strong>less than</strong> the node's key.</li> 	<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li> 	<li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg" style="width: 302px; height: 182px;"> <pre><strong>Input:</strong> root = [2,1,3] <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg" style="width: 422px; height: 292px;"> <pre><strong>Input:</strong> root = [5,1,4,null,null,3,6] <strong>Output:</strong> false <strong>Explanation:</strong> The root node's value is 5 but its right child's value is 4. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> 	<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>|https://www.youtube.com/watch?v=s6ATEkipzow
Trees|Kth Smallest Element In a Bst|Medium|<div class="elfjS" data-track-load="description_content"><p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest value (<strong>1-indexed</strong>) of all the values of the nodes in the tree</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg" style="width: 212px; height: 301px;"> <pre><strong>Input:</strong> root = [3,1,4,null,2], k = 1 <strong>Output:</strong> 1 </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg" style="width: 382px; height: 302px;"> <pre><strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3 <strong>Output:</strong> 3 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is <code>n</code>.</li> 	<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p> </div>|https://www.youtube.com/watch?v=5LUXSvjmGCw
Trees|Construct Binary Tree From Preorder And Inorder Traversal|Medium|<div class="elfjS" data-track-load="description_content"><p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" style="width: 277px; height: 302px;"> <pre><strong>Input:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] <strong>Output:</strong> [3,9,20,null,null,15,7] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> preorder = [-1], inorder = [-1] <strong>Output:</strong> [-1] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= preorder.length &lt;= 3000</code></li> 	<li><code>inorder.length == preorder.length</code></li> 	<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li> 	<li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li> 	<li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li> 	<li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li> 	<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li> </ul> </div>|https://www.youtube.com/watch?v=ihj4IQGZ2zc
Trees|Binary Tree Maximum Path Sum|Hard|<div class="elfjS" data-track-load="description_content"><p>A <strong>path</strong> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong>. Note that the path does not need to pass through the root.</p> <p>The <strong>path sum</strong> of a path is the sum of the node's values in the path.</p> <p>Given the <code>root</code> of a binary tree, return <em>the maximum <strong>path sum</strong> of any <strong>non-empty</strong> path</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg" style="width: 322px; height: 182px;"> <pre><strong>Input:</strong> root = [1,2,3] <strong>Output:</strong> 6 <strong>Explanation:</strong> The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6. </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg"> <pre><strong>Input:</strong> root = [-10,9,20,null,null,15,7] <strong>Output:</strong> 42 <strong>Explanation:</strong> The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[1, 3 * 10<sup>4</sup>]</code>.</li> 	<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=Hr5cWUld4vU
Trees|Serialize And Deserialize Binary Tree|Hard|<div class="elfjS" data-track-load="description_content"><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p> <p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p> <p><strong>Clarification:</strong> The input/output format is the same as <a href="https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-" target="_blank">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg" style="width: 442px; height: 324px;"> <pre><strong>Input:</strong> root = [1,2,3,null,null,4,5] <strong>Output:</strong> [1,2,3,null,null,4,5] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> root = [] <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> 	<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=u4JAi2JJhI8
Heap / Priority Queue|Kth Largest Element In a Stream|Easy|<div class="elfjS" data-track-load="description_content"><p>Design a class to find the <code>k<sup>th</sup></code> largest element in a stream. Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p> <p>Implement <code>KthLargest</code> class:</p> <ul> 	<li><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer <code>k</code> and the stream of integers <code>nums</code>.</li> 	<li><code>int add(int val)</code> Appends the integer <code>val</code> to the stream and returns the element representing the <code>k<sup>th</sup></code> largest element in the stream.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input</strong> ["KthLargest", "add", "add", "add", "add", "add"] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]] <strong>Output</strong> [null, 4, 5, 5, 8, 8] <strong>Explanation</strong> KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]); kthLargest.add(3);   // return 4 kthLargest.add(5);   // return 5 kthLargest.add(10);  // return 5 kthLargest.add(9);   // return 8 kthLargest.add(4);   // return 8 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup></code></li> 	<li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>.</li> 	<li>It is guaranteed that there will be at least <code>k</code> elements in the array when you search for the <code>k<sup>th</sup></code> element.</li> </ul> </div>|https://www.youtube.com/watch?v=hOjcdrqMoQ8
Heap / Priority Queue|Last Stone Weight|Easy|<div class="elfjS" data-track-load="description_content"><p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the <code>i<sup>th</sup></code> stone.</p> <p>We are playing a game with the stones. On each turn, we choose the <strong>heaviest two stones</strong> and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p> <ul> 	<li>If <code>x == y</code>, both stones are destroyed, and</li> 	<li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li> </ul> <p>At the end of the game, there is <strong>at most one</strong> stone left.</p> <p>Return <em>the weight of the last remaining stone</em>. If there are no stones left, return <code>0</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> stones = [2,7,4,1,8,1] <strong>Output:</strong> 1 <strong>Explanation:</strong>  We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> stones = [1] <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= stones.length &lt;= 30</code></li> 	<li><code>1 &lt;= stones[i] &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=B-QCq79-Vfw
Heap / Priority Queue|K Closest Points to Origin|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane and an integer <code>k</code>, return the <code>k</code> closest points to the origin <code>(0, 0)</code>.</p> <p>The distance between two points on the <strong>X-Y</strong> plane is the Euclidean distance (i.e., <code>√(x<sub>1</sub> - x<sub>2</sub>)<sup>2</sup> + (y<sub>1</sub> - y<sub>2</sub>)<sup>2</sup></code>).</p> <p>You may return the answer in <strong>any order</strong>. The answer is <strong>guaranteed</strong> to be <strong>unique</strong> (except for the order that it is in).</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg" style="width: 400px; height: 400px;"> <pre><strong>Input:</strong> points = [[1,3],[-2,2]], k = 1 <strong>Output:</strong> [[-2,2]] <strong>Explanation:</strong> The distance between (1, 3) and the origin is sqrt(10). The distance between (-2, 2) and the origin is sqrt(8). Since sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin. We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> points = [[3,3],[5,-1],[-2,4]], k = 2 <strong>Output:</strong> [[3,3],[-2,4]] <strong>Explanation:</strong> The answer [[-2,4],[3,3]] would also be accepted. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= k &lt;= points.length &lt;= 10<sup>4</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=rI2EBUEMfTk
Heap / Priority Queue|Kth Largest Element In An Array|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>largest element in the array</em>.</p> <p>Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p> <p>Can you solve it without sorting?</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [3,2,1,5,6,4], k = 2 <strong>Output:</strong> 5 </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [3,2,3,1,2,4,5,5,6], k = 4 <strong>Output:</strong> 4 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=XEmy13g1Qxc
Heap / Priority Queue|Task Scheduler|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an array of CPU <code>tasks</code>, each represented by letters&nbsp;A&nbsp;to Z, and a cooling time, <code>n</code>. Each cycle or interval allows the completion of one task. Tasks can be completed in any order, but there's a constraint: <strong>identical</strong> tasks must be separated by at least <code>n</code> intervals due to cooling time.</p> <p>​Return the <em>minimum number of intervals</em> required to complete all tasks.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <div class="example-block" style="border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: 0.875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;"> <p><strong>Input:</strong> <span class="example-io" style="font-family: Menlo, sans-serif; font-size: 0.85rem;">tasks = ["A","A","A","B","B","B"], n = 2</span></p> <p><strong>Output:</strong> <span class="example-io" style="font-family: Menlo, sans-serif; font-size: 0.85rem;">8</span></p> <p><strong>Explanation:</strong> A possible sequence is: A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.</p> <p>After completing task A, you must wait two cycles before doing A again. The same applies to task B. In the 3<sup>rd</sup> interval, neither A nor B can be done, so you idle. By the 4<sup>th</sup> cycle, you can do A again as 2 intervals have passed.</p> </div> <p><strong class="example">Example 2:</strong></p> <div class="example-block" style="border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: 0.875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;"> <p><strong>Input:</strong> <span class="example-io" style="font-family: Menlo, sans-serif; font-size: 0.85rem;">tasks = ["A","C","A","B","D","B"], n = 1</span></p> <p><strong>Output:</strong> <span class="example-io" style="font-family: Menlo, sans-serif; font-size: 0.85rem;">6</span></p> <p><strong>Explanation:</strong> A possible sequence is: A -&gt; B -&gt; C -&gt; D -&gt; A -&gt; B.</p> <p>With a cooling interval of 1, you can repeat a task after just one other task.</p> </div> <p><strong class="example">Example 3:</strong></p> <div class="example-block" style="border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: 0.875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;"> <p><strong>Input:</strong> <span class="example-io" style="font-family: Menlo, sans-serif; font-size: 0.85rem;">tasks = ["A","A","A", "B","B","B"], n = 3</span></p> <p><strong>Output:</strong> <span class="example-io" style="font-family: Menlo, sans-serif; font-size: 0.85rem;">10</span></p> <p><strong>Explanation:</strong> A possible sequence is: A -&gt; B -&gt; idle -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; idle -&gt; A -&gt; B.</p> <p>There are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks.</p> </div> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= tasks.length &lt;= 10<sup>4</sup></code></li> 	<li><code>tasks[i]</code> is an uppercase English letter.</li> 	<li><code>0 &lt;= n &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=s8p8ukTyA2I
Heap / Priority Queue|Design Twitter|Medium|<div class="elfjS" data-track-load="description_content"><p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the <code>10</code> most recent tweets in the user's news feed.</p> <p>Implement the <code>Twitter</code> class:</p> <ul> 	<li><code>Twitter()</code> Initializes your twitter object.</li> 	<li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li> 	<li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be <strong>ordered from most recent to least recent</strong>.</li> 	<li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li> 	<li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input</strong> ["Twitter", "postTweet", "getNewsFeed", "follow", "postTweet", "getNewsFeed", "unfollow", "getNewsFeed"] [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]] <strong>Output</strong> [null, null, [5], null, null, [6, 5], null, [5]] <strong>Explanation</strong> Twitter twitter = new Twitter(); twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5). twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5]. return [5] twitter.follow(1, 2);    // User 1 follows user 2. twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6). twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5. twitter.unfollow(1, 2);  // User 1 unfollows user 2. twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li> 	<li><code>0 &lt;= tweetId &lt;= 10<sup>4</sup></code></li> 	<li>All the tweets have <strong>unique</strong> IDs.</li> 	<li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=pNichitDD2E
Heap / Priority Queue|Find Median From Data Stream|Hard|<div class="elfjS" data-track-load="description_content"><p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p> <ul> 	<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li> 	<li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li> </ul> <p>Implement the MedianFinder class:</p> <ul> 	<li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li> 	<li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li> 	<li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input</strong> ["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"] [[], [1], [2], [], [3], []] <strong>Output</strong> [null, null, null, 1.5, null, 2.0] <strong>Explanation</strong> MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1);    // arr = [1] medianFinder.addNum(2);    // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2) medianFinder.addNum(3);    // arr[1, 2, 3] medianFinder.findMedian(); // return 2.0 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li> 	<li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li> 	<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong></p> <ul> 	<li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li> 	<li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li> </ul> </div>|https://www.youtube.com/watch?v=itmhHWaHupI
Backtracking|Subsets|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code> of <strong>unique</strong> elements, return <em>all possible</em> <span data-keyword="subset" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div><em>subsets</em></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(489px, 185px);"></div></div></div></span> <em>(the power set)</em>.</p> <p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3] <strong>Output:</strong> [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [0] <strong>Output:</strong> [[],[0]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10</code></li> 	<li><code>-10 &lt;= nums[i] &lt;= 10</code></li> 	<li>All the numbers of&nbsp;<code>nums</code> are <strong>unique</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=REOH22Xwdkk
Backtracking|Combination Sum|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p> <p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the <span data-keyword="frequency-array" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div>frequency</div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(288px, 285px);"></div></div></div></span> of at least one of the chosen numbers is different.</p> <p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> candidates = [2,3,6,7], target = 7 <strong>Output:</strong> [[2,2,3],[7]] <strong>Explanation:</strong> 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> candidates = [2,3,5], target = 8 <strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> candidates = [2], target = 1 <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= candidates.length &lt;= 30</code></li> 	<li><code>2 &lt;= candidates[i] &lt;= 40</code></li> 	<li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li> 	<li><code>1 &lt;= target &lt;= 40</code></li> </ul> </div>|https://www.youtube.com/watch?v=GBKI9VSKdGg
Backtracking|Permutations|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3] <strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [0,1] <strong>Output:</strong> [[0,1],[1,0]] </pre><p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [1] <strong>Output:</strong> [[1]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 6</code></li> 	<li><code>-10 &lt;= nums[i] &lt;= 10</code></li> 	<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=s7AvT7cGdSo
Backtracking|Subsets II|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code> that may contain duplicates, return <em>all possible</em> <span data-keyword="subset" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div><em>subsets</em></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(540px, 185px);"></div></div></div></span><em> (the power set)</em>.</p> <p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,2,2] <strong>Output:</strong> [[],[1],[1,2],[1,2,2],[2],[2,2]] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [0] <strong>Output:</strong> [[],[0]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10</code></li> 	<li><code>-10 &lt;= nums[i] &lt;= 10</code></li> </ul> </div>|https://www.youtube.com/watch?v=Vn2v6ajA7U0
Backtracking|Combination Sum II|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sum to <code>target</code>.</p> <p>Each number in <code>candidates</code>&nbsp;may only be used <strong>once</strong> in the combination.</p> <p><strong>Note:</strong>&nbsp;The solution set must not contain duplicate combinations.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> candidates = [10,1,2,7,6,1,5], target = 8 <strong>Output:</strong>  [ [1,1,6], [1,2,5], [1,7], [2,6] ] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> candidates = [2,5,2,1,2], target = 5 <strong>Output:</strong>  [ [1,2,2], [5] ] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;=&nbsp;candidates.length &lt;= 100</code></li> 	<li><code>1 &lt;=&nbsp;candidates[i] &lt;= 50</code></li> 	<li><code>1 &lt;= target &lt;= 30</code></li> </ul> </div>|https://www.youtube.com/watch?v=rSA3t6BDDwg
Backtracking|Word Search|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> <em>if</em> <code>word</code> <em>exists in the grid</em>.</p> <p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" style="width: 322px; height: 242px;"> <pre><strong>Input:</strong> board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED" <strong>Output:</strong> true </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg" style="width: 322px; height: 242px;"> <pre><strong>Input:</strong> board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE" <strong>Output:</strong> true </pre> <p><strong class="example">Example 3:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg" style="width: 322px; height: 242px;"> <pre><strong>Input:</strong> board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB" <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == board.length</code></li> 	<li><code>n = board[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 6</code></li> 	<li><code>1 &lt;= word.length &lt;= 15</code></li> 	<li><code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> Could you use search pruning to make your solution faster with a larger <code>board</code>?</p> </div>|https://www.youtube.com/watch?v=pfiQ_PS1g8E
Backtracking|Palindrome Partitioning|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a string <code>s</code>, partition <code>s</code> such that every <span data-keyword="substring-nonempty" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div>substring</div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(345px, 185px);"></div></div></div></span> of the partition is a <span data-keyword="palindrome-string" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rl:"><div><strong>palindrome</strong></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(65px, 206px);"></div></div></div></span>. Return <em>all possible palindrome partitioning of </em><code>s</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "aab" <strong>Output:</strong> [["a","a","b"],["aa","b"]] </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "a" <strong>Output:</strong> [["a"]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 16</code></li> 	<li><code>s</code> contains only lowercase English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=3jvWodd7ht0
Backtracking|Letter Combinations of a Phone Number|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p> <p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p> <img alt="" src="https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png" style="width: 300px; height: 243px;"> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> digits = "23" <strong>Output:</strong> ["ad","ae","af","bd","be","bf","cd","ce","cf"] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> digits = "" <strong>Output:</strong> [] </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> digits = "2" <strong>Output:</strong> ["a","b","c"] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= digits.length &lt;= 4</code></li> 	<li><code>digits[i]</code> is a digit in the range <code>['2', '9']</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=0snEunUacZY
Backtracking|N Queens|Hard|<div class="elfjS" data-track-load="description_content"><p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p> <p>Given an integer <code>n</code>, return <em>all distinct solutions to the <strong>n-queens puzzle</strong></em>. You may return the answer in <strong>any order</strong>.</p> <p>Each solution contains a distinct board configuration of the n-queens' placement, where <code>'Q'</code> and <code>'.'</code> both indicate a queen and an empty space, respectively.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" style="width: 600px; height: 268px;"> <pre><strong>Input:</strong> n = 4 <strong>Output:</strong> [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]] <strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> n = 1 <strong>Output:</strong> [["Q"]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= n &lt;= 9</code></li> </ul> </div>|https://www.youtube.com/watch?v=Ph95IHmRp5M
Tries|Implement Trie Prefix Tree|Medium|<div class="elfjS" data-track-load="description_content"><p>A <a href="https://en.wikipedia.org/wiki/Trie" target="_blank"><strong>trie</strong></a> (pronounced as "try") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p> <p>Implement the Trie class:</p> <ul> 	<li><code>Trie()</code> Initializes the trie object.</li> 	<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li> 	<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li> 	<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input</strong> ["Trie", "insert", "search", "search", "startsWith", "insert", "search"] [[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]] <strong>Output</strong> [null, null, true, false, true, null, true] <strong>Explanation</strong> Trie trie = new Trie(); trie.insert("apple"); trie.search("apple");   // return True trie.search("app");     // return False trie.startsWith("app"); // return True trie.insert("app"); trie.search("app");     // return True </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> 	<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li> 	<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=oobqoCJlHA0
Tries|Design Add And Search Words Data Structure|Medium|<div class="elfjS" data-track-load="description_content"><p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p> <p>Implement the <code>WordDictionary</code> class:</p> <ul> 	<li><code>WordDictionary()</code>&nbsp;Initializes the object.</li> 	<li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li> 	<li><code>bool search(word)</code>&nbsp;Returns <code>true</code> if there is any string in the data structure that matches <code>word</code>&nbsp;or <code>false</code> otherwise. <code>word</code> may contain dots <code>'.'</code> where dots can be matched with any letter.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example:</strong></p> <pre><strong>Input</strong> ["WordDictionary","addWord","addWord","addWord","search","search","search","search"] [[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]] <strong>Output</strong> [null,null,null,null,false,true,true,true] <strong>Explanation</strong> WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord("bad"); wordDictionary.addWord("dad"); wordDictionary.addWord("mad"); wordDictionary.search("pad"); // return False wordDictionary.search("bad"); // return True wordDictionary.search(".ad"); // return True wordDictionary.search("b.."); // return True </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= word.length &lt;= 25</code></li> 	<li><code>word</code> in <code>addWord</code> consists of lowercase English letters.</li> 	<li><code>word</code> in <code>search</code> consist of <code>'.'</code> or lowercase English letters.</li> 	<li>There will be at most <code>2</code> dots in <code>word</code> for <code>search</code> queries.</li> 	<li>At most <code>10<sup>4</sup></code> calls will be made to <code>addWord</code> and <code>search</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=BTf05gs_8iU
Tries|Word Search II|Hard|<div class="elfjS" data-track-load="description_content"><p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p> <p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/07/search1.jpg" style="width: 322px; height: 322px;"> <pre><strong>Input:</strong> board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"] <strong>Output:</strong> ["eat","oath"] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/07/search2.jpg" style="width: 162px; height: 162px;"> <pre><strong>Input:</strong> board = [["a","b"],["c","d"]], words = ["abcb"] <strong>Output:</strong> [] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == board.length</code></li> 	<li><code>n == board[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 12</code></li> 	<li><code>board[i][j]</code> is a lowercase English letter.</li> 	<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li> 	<li><code>1 &lt;= words[i].length &lt;= 10</code></li> 	<li><code>words[i]</code> consists of lowercase English letters.</li> 	<li>All the strings of <code>words</code> are unique.</li> </ul> </div>|https://www.youtube.com/watch?v=asbcE9mZz_U
Graphs|Number of Islands|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>'1'</code>s (land) and <code>'0'</code>s (water), return <em>the number of islands</em>.</p> <p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> grid = [   ["1","1","1","1","0"],   ["1","1","0","1","0"],   ["1","1","0","0","0"],   ["0","0","0","0","0"] ] <strong>Output:</strong> 1 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> grid = [   ["1","1","0","0","0"],   ["1","1","0","0","0"],   ["0","0","1","0","0"],   ["0","0","0","1","1"] ] <strong>Output:</strong> 3 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == grid.length</code></li> 	<li><code>n == grid[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 300</code></li> 	<li><code>grid[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=pV2kpPD66nE
Graphs|Max Area of Island|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an <code>m x n</code> binary matrix <code>grid</code>. An island is a group of <code>1</code>'s (representing land) connected <strong>4-directionally</strong> (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p> <p>The <strong>area</strong> of an island is the number of cells with a value <code>1</code> in the island.</p> <p>Return <em>the maximum <strong>area</strong> of an island in </em><code>grid</code>. If there is no island, return <code>0</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg" style="width: 500px; height: 310px;"> <pre><strong>Input:</strong> grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]] <strong>Output:</strong> 6 <strong>Explanation:</strong> The answer is not 11, because the island must be connected 4-directionally. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> grid = [[0,0,0,0,0,0,0,0]] <strong>Output:</strong> 0 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == grid.length</code></li> 	<li><code>n == grid[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 50</code></li> 	<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=iJGr1OtmH0c
Graphs|Clone Graph|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a reference of a node in a <strong><a href="https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph" target="_blank">connected</a></strong> undirected graph.</p> <p>Return a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy" target="_blank"><strong>deep copy</strong></a> (clone) of the graph.</p> <p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p> <pre>class Node {     public int val;     public List&lt;Node&gt; neighbors; } </pre> <p>&nbsp;</p> <p><strong>Test case format:</strong></p> <p>For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p> <p><b>An adjacency list</b> is a collection of unordered <b>lists</b> used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p> <p>The given node will always be the first node with <code>val = 1</code>. You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png" style="width: 454px; height: 500px;"> <pre><strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]] <strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]] <strong>Explanation:</strong> There are 4 nodes in the graph. 1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/01/07/graph.png" style="width: 163px; height: 148px;"> <pre><strong>Input:</strong> adjList = [[]] <strong>Output:</strong> [[]] <strong>Explanation:</strong> Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> adjList = [] <strong>Output:</strong> [] <strong>Explanation:</strong> This an empty graph, it does not have any nodes. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li> 	<li><code>1 &lt;= Node.val &lt;= 100</code></li> 	<li><code>Node.val</code> is unique for each node.</li> 	<li>There are no repeated edges and no self-loops in the graph.</li> 	<li>The Graph is connected and all nodes can be visited starting from the given node.</li> </ul> </div>|https://www.youtube.com/watch?v=mQeF6bN8hMk
Graphs|Walls And Gates|Medium|<div class="elfjS" data-track-load="description_content"></div>|https://www.youtube.com/watch?v=e69C6xhiSQE
Graphs|Rotting Oranges|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an <code>m x n</code> <code>grid</code> where each cell can have one of three values:</p> <ul> 	<li><code>0</code> representing an empty cell,</li> 	<li><code>1</code> representing a fresh orange, or</li> 	<li><code>2</code> representing a rotten orange.</li> </ul> <p>Every minute, any fresh orange that is <strong>4-directionally adjacent</strong> to a rotten orange becomes rotten.</p> <p>Return <em>the minimum number of minutes that must elapse until no cell has a fresh orange</em>. If <em>this is impossible, return</em> <code>-1</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2019/02/16/oranges.png" style="width: 650px; height: 137px;"> <pre><strong>Input:</strong> grid = [[2,1,1],[1,1,0],[0,1,1]] <strong>Output:</strong> 4 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> grid = [[2,1,1],[0,1,1],[1,0,1]] <strong>Output:</strong> -1 <strong>Explanation:</strong> The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> grid = [[0,2]] <strong>Output:</strong> 0 <strong>Explanation:</strong> Since there are already no fresh oranges at minute 0, the answer is just 0. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == grid.length</code></li> 	<li><code>n == grid[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 10</code></li> 	<li><code>grid[i][j]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=y704fEOx0s0
Graphs|Pacific Atlantic Water Flow|Medium|<div class="elfjS" data-track-load="description_content"><p>There is an <code>m x n</code> rectangular island that borders both the <strong>Pacific Ocean</strong> and <strong>Atlantic Ocean</strong>. The <strong>Pacific Ocean</strong> touches the island's left and top edges, and the <strong>Atlantic Ocean</strong> touches the island's right and bottom edges.</p> <p>The island is partitioned into a grid of square cells. You are given an <code>m x n</code> integer matrix <code>heights</code> where <code>heights[r][c]</code> represents the <strong>height above sea level</strong> of the cell at coordinate <code>(r, c)</code>.</p> <p>The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is <strong>less than or equal to</strong> the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.</p> <p>Return <em>a <strong>2D list</strong> of grid coordinates </em><code>result</code><em> where </em><code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code><em> denotes that rain water can flow from cell </em><code>(r<sub>i</sub>, c<sub>i</sub>)</code><em> to <strong>both</strong> the Pacific and Atlantic oceans</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg" style="width: 400px; height: 400px;"> <pre><strong>Input:</strong> heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]] <strong>Output:</strong> [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] <strong>Explanation:</strong> The following cells can flow to the Pacific and Atlantic oceans, as shown below: [0,4]: [0,4] -&gt; Pacific Ocean  &nbsp;      [0,4] -&gt; Atlantic Ocean [1,3]: [1,3] -&gt; [0,3] -&gt; Pacific Ocean  &nbsp;      [1,3] -&gt; [1,4] -&gt; Atlantic Ocean [1,4]: [1,4] -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Ocean  &nbsp;      [1,4] -&gt; Atlantic Ocean [2,2]: [2,2] -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Ocean  &nbsp;      [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Ocean [3,0]: [3,0] -&gt; Pacific Ocean  &nbsp;      [3,0] -&gt; [4,0] -&gt; Atlantic Ocean [3,1]: [3,1] -&gt; [3,0] -&gt; Pacific Ocean  &nbsp;      [3,1] -&gt; [4,1] -&gt; Atlantic Ocean [4,0]: [4,0] -&gt; Pacific Ocean         [4,0] -&gt; Atlantic Ocean Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> heights = [[1]] <strong>Output:</strong> [[0,0]] <strong>Explanation:</strong> The water can flow from the only cell to the Pacific and Atlantic oceans. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == heights.length</code></li> 	<li><code>n == heights[r].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 200</code></li> 	<li><code>0 &lt;= heights[r][c] &lt;= 10<sup>5</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=s-VkcjHqkGI
Graphs|Surrounded Regions|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an <code>m x n</code> matrix <code>board</code> containing <code>'X'</code> and <code>'O'</code>, <em>capture all regions that are 4-directionally&nbsp;surrounded by</em> <code>'X'</code>.</p> <p>A region is <strong>captured</strong> by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg" style="width: 550px; height: 237px;"> <pre><strong>Input:</strong> board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]] <strong>Output:</strong> [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]] <strong>Explanation:</strong> Notice that an 'O' should not be flipped if: - It is on the border, or - It is adjacent to an 'O' that should not be flipped. The bottom 'O' is on the border, so it is not flipped. The other three 'O' form a surrounded region, so they are flipped. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> board = [["X"]] <strong>Output:</strong> [["X"]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == board.length</code></li> 	<li><code>n == board[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 200</code></li> 	<li><code>board[i][j]</code> is <code>'X'</code> or <code>'O'</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=9z2BunfoZ5Y
Graphs|Course Schedule|Medium|<div class="elfjS" data-track-load="description_content"><p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p> <ul> 	<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]] <strong>Output:</strong> true <strong>Explanation:</strong> There are a total of 2 courses to take.  To take course 1 you should have finished course 0. So it is possible. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]] <strong>Output:</strong> false <strong>Explanation:</strong> There are a total of 2 courses to take.  To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= numCourses &lt;= 2000</code></li> 	<li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li> 	<li><code>prerequisites[i].length == 2</code></li> 	<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li> 	<li>All the pairs prerequisites[i] are <strong>unique</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=EgI5nU9etnU
Graphs|Course Schedule II|Medium|<div class="elfjS" data-track-load="description_content"><p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p> <ul> 	<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return <em>the ordering of courses you should take to finish all courses</em>. If there are many valid answers, return <strong>any</strong> of them. If it is impossible to finish all courses, return <strong>an empty array</strong>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]] <strong>Output:</strong> [0,1] <strong>Explanation:</strong> There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] <strong>Output:</strong> [0,2,1,3] <strong>Explanation:</strong> There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> numCourses = 1, prerequisites = [] <strong>Output:</strong> [0] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= numCourses &lt;= 2000</code></li> 	<li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li> 	<li><code>prerequisites[i].length == 2</code></li> 	<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li> 	<li><code>a<sub>i</sub> != b<sub>i</sub></code></li> 	<li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are <strong>distinct</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=Akt3glAwyfY
Graphs|Graph Valid Tree|Medium|<div class="elfjS" data-track-load="description_content"></div>|https://www.youtube.com/watch?v=bXsUuownnoQ
Graphs|Number of Connected Components In An Undirected Graph|Medium|<div class="elfjS" data-track-load="description_content"></div>|https://www.youtube.com/watch?v=8f1XPm4WOUc
Graphs|Redundant Connection|Medium|<div class="elfjS" data-track-load="description_content"><p>In this problem, a tree is an <strong>undirected graph</strong> that is connected and has no cycles.</p> <p>You are given a graph that started as a tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>, with one additional edge added. The added edge has two <strong>different</strong> vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed. The graph is represented as an array <code>edges</code> of length <code>n</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the graph.</p> <p>Return <em>an edge that can be removed so that the resulting graph is a tree of </em><code>n</code><em> nodes</em>. If there are multiple answers, return the answer that occurs last in the input.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg" style="width: 222px; height: 222px;"> <pre><strong>Input:</strong> edges = [[1,2],[1,3],[2,3]] <strong>Output:</strong> [2,3] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg" style="width: 382px; height: 222px;"> <pre><strong>Input:</strong> edges = [[1,2],[2,3],[3,4],[1,4],[1,5]] <strong>Output:</strong> [1,4] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == edges.length</code></li> 	<li><code>3 &lt;= n &lt;= 1000</code></li> 	<li><code>edges[i].length == 2</code></li> 	<li><code>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= edges.length</code></li> 	<li><code>a<sub>i</sub> != b<sub>i</sub></code></li> 	<li>There are no repeated edges.</li> 	<li>The given graph is connected.</li> </ul> </div>|https://www.youtube.com/watch?v=FXWRE67PLL0
Graphs|Word Ladder|Hard|<div class="elfjS" data-track-load="description_content"><p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p> <ul> 	<li>Every adjacent pair of words differs by a single letter.</li> 	<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li> 	<li><code>s<sub>k</sub> == endWord</code></li> </ul> <p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"] <strong>Output:</strong> 5 <strong>Explanation:</strong> One shortest transformation sequence is "hit" -&gt; "hot" -&gt; "dot" -&gt; "dog" -&gt; cog", which is 5 words long. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"] <strong>Output:</strong> 0 <strong>Explanation:</strong> The endWord "cog" is not in wordList, therefore there is no valid transformation sequence. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= beginWord.length &lt;= 10</code></li> 	<li><code>endWord.length == beginWord.length</code></li> 	<li><code>1 &lt;= wordList.length &lt;= 5000</code></li> 	<li><code>wordList[i].length == beginWord.length</code></li> 	<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li> 	<li><code>beginWord != endWord</code></li> 	<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=h9iTnkgv05E
Advanced Graphs|Reconstruct Itinerary|Hard|<div class="elfjS" data-track-load="description_content"><p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p> <p>All of the tickets belong to a man who departs from <code>"JFK"</code>, thus, the itinerary must begin with <code>"JFK"</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p> <ul> 	<li>For example, the itinerary <code>["JFK", "LGA"]</code> has a smaller lexical order than <code>["JFK", "LGB"]</code>.</li> </ul> <p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg" style="width: 382px; height: 222px;"> <pre><strong>Input:</strong> tickets = [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]] <strong>Output:</strong> ["JFK","MUC","LHR","SFO","SJC"] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg" style="width: 222px; height: 230px;"> <pre><strong>Input:</strong> tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]] <strong>Output:</strong> ["JFK","ATL","JFK","SFO","ATL","SFO"] <strong>Explanation:</strong> Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"] but it is larger in lexical order. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= tickets.length &lt;= 300</code></li> 	<li><code>tickets[i].length == 2</code></li> 	<li><code>from<sub>i</sub>.length == 3</code></li> 	<li><code>to<sub>i</sub>.length == 3</code></li> 	<li><code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> consist of uppercase English letters.</li> 	<li><code>from<sub>i</sub> != to<sub>i</sub></code></li> </ul> </div>|https://www.youtube.com/watch?v=ZyB_gQ8vqGA
Advanced Graphs|Min Cost to Connect All Points|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an array <code>points</code> representing integer coordinates of some points on a 2D-plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p> <p>The cost of connecting two points <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>]</code> is the <strong>manhattan distance</strong> between them: <code>\x<sub>i</sub> - x<sub>j</sub>\ + \y<sub>i</sub> - y<sub>j</sub>\</code>, where <code>\val\</code> denotes the absolute value of <code>val</code>.</p> <p>Return <em>the minimum cost to make all points connected.</em> All points are connected if there is <strong>exactly one</strong> simple path between any two points.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/08/26/d.png" style="width: 214px; height: 268px;"> <pre><strong>Input:</strong> points = [[0,0],[2,2],[3,10],[5,2],[7,0]] <strong>Output:</strong> 20 <strong>Explanation:</strong>  <img alt="" src="https://assets.leetcode.com/uploads/2020/08/26/c.png" style="width: 214px; height: 268px;"> We can connect the points as shown above to get the minimum cost of 20. Notice that there is a unique path between every pair of points. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> points = [[3,12],[-2,5],[-4,1]] <strong>Output:</strong> 18 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= points.length &lt;= 1000</code></li> 	<li><code>-10<sup>6</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>6</sup></code></li> 	<li>All pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are distinct.</li> </ul> </div>|https://www.youtube.com/watch?v=f7JOBJIC-NA
Advanced Graphs|Network Delay Time|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given a network of <code>n</code> nodes, labeled from <code>1</code> to <code>n</code>. You are also given <code>times</code>, a list of travel times as directed edges <code>times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)</code>, where <code>u<sub>i</sub></code> is the source node, <code>v<sub>i</sub></code> is the target node, and <code>w<sub>i</sub></code> is the time it takes for a signal to travel from source to target.</p> <p>We will send a signal from a given node <code>k</code>. Return <em>the <strong>minimum</strong> time it takes for all the</em> <code>n</code> <em>nodes to receive the signal</em>. If it is impossible for all the <code>n</code> nodes to receive the signal, return <code>-1</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png" style="width: 217px; height: 239px;"> <pre><strong>Input:</strong> times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2 <strong>Output:</strong> 2 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> times = [[1,2,1]], n = 2, k = 1 <strong>Output:</strong> 1 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> times = [[1,2,1]], n = 2, k = 2 <strong>Output:</strong> -1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= k &lt;= n &lt;= 100</code></li> 	<li><code>1 &lt;= times.length &lt;= 6000</code></li> 	<li><code>times[i].length == 3</code></li> 	<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> 	<li><code>u<sub>i</sub> != v<sub>i</sub></code></li> 	<li><code>0 &lt;= w<sub>i</sub> &lt;= 100</code></li> 	<li>All the pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are <strong>unique</strong>. (i.e., no multiple edges.)</li> </ul> </div>|https://www.youtube.com/watch?v=EaphyqKU4PQ
Advanced Graphs|Swim In Rising Water|Hard|<div class="elfjS" data-track-load="description_content"><p>You are given an <code>n x n</code> integer matrix <code>grid</code> where each value <code>grid[i][j]</code> represents the elevation at that point <code>(i, j)</code>.</p> <p>The rain starts to fall. At time <code>t</code>, the depth of the water everywhere is <code>t</code>. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most <code>t</code>. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.</p> <p>Return <em>the least time until you can reach the bottom right square </em><code>(n - 1, n - 1)</code><em> if you start at the top left square </em><code>(0, 0)</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/06/29/swim1-grid.jpg" style="width: 164px; height: 165px;"> <pre><strong>Input:</strong> grid = [[0,2],[1,3]] <strong>Output:</strong> 3 Explanation: At time 0, you are in grid location (0, 0). You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0. You cannot reach point (1, 1) until time 3. When the depth of water is 3, we can swim anywhere inside the grid. </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/06/29/swim2-grid-1.jpg" style="width: 404px; height: 405px;"> <pre><strong>Input:</strong> grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]] <strong>Output:</strong> 16 <strong>Explanation:</strong> The final route is shown. We need to wait until time 16 so that (0, 0) and (4, 4) are connected. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == grid.length</code></li> 	<li><code>n == grid[i].length</code></li> 	<li><code>1 &lt;= n &lt;= 50</code></li> 	<li><code>0 &lt;= grid[i][j] &lt;&nbsp;n<sup>2</sup></code></li> 	<li>Each value <code>grid[i][j]</code> is <strong>unique</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=amvrKlMLuGY
Advanced Graphs|Alien Dictionary|Hard|<div class="elfjS" data-track-load="description_content"></div>|https://www.youtube.com/watch?v=6kTZYvNNyps
Advanced Graphs|Cheapest Flights Within K Stops|Medium|<div class="elfjS" data-track-load="description_content"><p>There are <code>n</code> cities connected by some number of flights. You are given an array <code>flights</code> where <code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code> indicates that there is a flight from city <code>from<sub>i</sub></code> to city <code>to<sub>i</sub></code> with cost <code>price<sub>i</sub></code>.</p> <p>You are also given three integers <code>src</code>, <code>dst</code>, and <code>k</code>, return <em><strong>the cheapest price</strong> from </em><code>src</code><em> to </em><code>dst</code><em> with at most </em><code>k</code><em> stops. </em>If there is no such route, return<em> </em><code>-1</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png" style="width: 332px; height: 392px;"> <pre><strong>Input:</strong> n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1 <strong>Output:</strong> 700 <strong>Explanation:</strong> The graph is shown above. The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700. Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops. </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png" style="width: 332px; height: 242px;"> <pre><strong>Input:</strong> n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1 <strong>Output:</strong> 200 <strong>Explanation:</strong> The graph is shown above. The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200. </pre> <p><strong class="example">Example 3:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png" style="width: 332px; height: 242px;"> <pre><strong>Input:</strong> n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0 <strong>Output:</strong> 500 <strong>Explanation:</strong> The graph is shown above. The optimal path with no stops from city 0 to 2 is marked in red and has cost 500. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= n &lt;= 100</code></li> 	<li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li> 	<li><code>flights[i].length == 3</code></li> 	<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li> 	<li><code>from<sub>i</sub> != to<sub>i</sub></code></li> 	<li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li> 	<li>There will not be any multiple flights between two cities.</li> 	<li><code>0 &lt;= src, dst, k &lt; n</code></li> 	<li><code>src != dst</code></li> </ul> </div>|https://www.youtube.com/watch?v=5eIK3zUdYmE
1-D Dynamic Programming|Climbing Stairs|Easy|<div class="elfjS" data-track-load="description_content"><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p> <p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> n = 2 <strong>Output:</strong> 2 <strong>Explanation:</strong> There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> n = 3 <strong>Output:</strong> 3 <strong>Explanation:</strong> There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= n &lt;= 45</code></li> </ul> </div>|https://www.youtube.com/watch?v=Y0lT9Fck7qI
1-D Dynamic Programming|Min Cost Climbing Stairs|Easy|<div class="elfjS" data-track-load="description_content"><p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>i<sup>th</sup></code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p> <p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p> <p>Return <em>the minimum cost to reach the top of the floor</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> cost = [10,<u>15</u>,20] <strong>Output:</strong> 15 <strong>Explanation:</strong> You will start at index 1. - Pay 15 and climb two steps to reach the top. The total cost is 15. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> cost = [<u>1</u>,100,<u>1</u>,1,<u>1</u>,100,<u>1</u>,<u>1</u>,100,<u>1</u>] <strong>Output:</strong> 6 <strong>Explanation:</strong> You will start at index 0. - Pay 1 and climb two steps to reach index 2. - Pay 1 and climb two steps to reach index 4. - Pay 1 and climb two steps to reach index 6. - Pay 1 and climb one step to reach index 7. - Pay 1 and climb two steps to reach index 9. - Pay 1 and climb one step to reach the top. The total cost is 6. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>2 &lt;= cost.length &lt;= 1000</code></li> 	<li><code>0 &lt;= cost[i] &lt;= 999</code></li> </ul> </div>|https://www.youtube.com/watch?v=ktmzAZWkEZ0
1-D Dynamic Programming|House Robber|Medium|<div class="elfjS" data-track-load="description_content"><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p> <p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <b>without alerting the police</b></em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3,1] <strong>Output:</strong> 4 <strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [2,7,9,3,1] <strong>Output:</strong> 12 <strong>Explanation:</strong> Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 100</code></li> 	<li><code>0 &lt;= nums[i] &lt;= 400</code></li> </ul> </div>|https://www.youtube.com/watch?v=73r3KWiEvyk
1-D Dynamic Programming|House Robber II|Medium|<div class="elfjS" data-track-load="description_content"><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and&nbsp;<b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p> <p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [2,3,2] <strong>Output:</strong> 3 <strong>Explanation:</strong> You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3,1] <strong>Output:</strong> 4 <strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3] <strong>Output:</strong> 3 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 100</code></li> 	<li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=rWAJCfYYOvM
1-D Dynamic Programming|Longest Palindromic Substring|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a string <code>s</code>, return <em>the longest</em> <span data-keyword="palindromic-string" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div><em>palindromic</em></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(295px, 185px);"></div></div></div></span> <span data-keyword="substring-nonempty" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rl:"><div><em>substring</em></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(367px, 185px);"></div></div></div></span> in <code>s</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "babad" <strong>Output:</strong> "bab" <strong>Explanation:</strong> "aba" is also a valid answer. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "cbbd" <strong>Output:</strong> "bb" </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 1000</code></li> 	<li><code>s</code> consist of only digits and English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=XYQecbcd6_c
1-D Dynamic Programming|Palindromic Substrings|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a string <code>s</code>, return <em>the number of <strong>palindromic substrings</strong> in it</em>.</p> <p>A string is a <strong>palindrome</strong> when it reads the same backward as forward.</p> <p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "abc" <strong>Output:</strong> 3 <strong>Explanation:</strong> Three palindromic strings: "a", "b", "c". </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "aaa" <strong>Output:</strong> 6 <strong>Explanation:</strong> Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa". </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 1000</code></li> 	<li><code>s</code> consists of lowercase English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=4RACzI5-du8
1-D Dynamic Programming|Decode Ways|Medium|<div class="elfjS" data-track-load="description_content"><p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p> <pre>'A' -&gt; "1" 'B' -&gt; "2" ... 'Z' -&gt; "26" </pre> <p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>"11106"</code> can be mapped into:</p> <ul> 	<li><code>"AAJF"</code> with the grouping <code>(1 1 10 6)</code></li> 	<li><code>"KJF"</code> with the grouping <code>(11 10 6)</code></li> </ul> <p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>"06"</code> cannot be mapped into <code>'F'</code> since <code>"6"</code> is different from <code>"06"</code>.</p> <p>Given a string <code>s</code> containing only digits, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p> <p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "12" <strong>Output:</strong> 2 <strong>Explanation:</strong> "12" could be decoded as "AB" (1 2) or "L" (12). </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "226" <strong>Output:</strong> 3 <strong>Explanation:</strong> "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6). </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = "06" <strong>Output:</strong> 0 <strong>Explanation:</strong> "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06"). </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 100</code></li> 	<li><code>s</code> contains only digits and may contain leading zero(s).</li> </ul> </div>|https://www.youtube.com/watch?v=6aEyTjOwlJU
1-D Dynamic Programming|Coin Change|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p> <p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> coins = [1,2,5], amount = 11 <strong>Output:</strong> 3 <strong>Explanation:</strong> 11 = 5 + 5 + 1 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> coins = [2], amount = 3 <strong>Output:</strong> -1 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> coins = [1], amount = 0 <strong>Output:</strong> 0 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= coins.length &lt;= 12</code></li> 	<li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li> 	<li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=H9bfqozjoqs
1-D Dynamic Programming|Maximum Product Subarray|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code>, find a <span data-keyword="subarray-nonempty" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div>subarray</div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(283px, 185px);"></div></div></div></span> that has the largest product, and return <em>the product</em>.</p> <p>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [2,3,-2,4] <strong>Output:</strong> 6 <strong>Explanation:</strong> [2,3] has the largest product 6. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [-2,0,-1] <strong>Output:</strong> 0 <strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> 	<li><code>-10 &lt;= nums[i] &lt;= 10</code></li> 	<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li> </ul> </div>|https://www.youtube.com/watch?v=lXVy6YWFcRM
1-D Dynamic Programming|Word Break|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p> <p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "leetcode", wordDict = ["leet","code"] <strong>Output:</strong> true <strong>Explanation:</strong> Return true because "leetcode" can be segmented as "leet code". </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "applepenapple", wordDict = ["apple","pen"] <strong>Output:</strong> true <strong>Explanation:</strong> Return true because "applepenapple" can be segmented as "apple pen apple". Note that you are allowed to reuse a dictionary word. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = "catsandog", wordDict = ["cats","dog","sand","and","cat"] <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 300</code></li> 	<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> 	<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li> 	<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li> 	<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li> </ul> </div>|https://www.youtube.com/watch?v=Sx9NNgInc3A
1-D Dynamic Programming|Longest Increasing Subsequence|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing </strong></em><span data-keyword="subsequence-array" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div><em><strong>subsequence</strong></em></div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(72px, 206px);"></div></div></div></span>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [10,9,2,5,3,7,101,18] <strong>Output:</strong> 4 <strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [0,1,0,3,2,3] <strong>Output:</strong> 4 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [7,7,7,7,7,7,7] <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 2500</code></li> 	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul> <p>&nbsp;</p> <p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p> </div>|https://www.youtube.com/watch?v=cjWnW0hdF1Y
1-D Dynamic Programming|Partition Equal Subset Sum|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code>, return <code>true</code> <em>if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or </em><code>false</code><em> otherwise</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,5,11,5] <strong>Output:</strong> true <strong>Explanation:</strong> The array can be partitioned as [1, 5, 5] and [11]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1,2,3,5] <strong>Output:</strong> false <strong>Explanation:</strong> The array cannot be partitioned into equal sum subsets. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 200</code></li> 	<li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=IsvocB5BJhw
2-D Dynamic Programming|Unique Paths|Medium|<div class="elfjS" data-track-load="description_content"><p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p> <p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" style="width: 400px; height: 183px;"> <pre><strong>Input:</strong> m = 3, n = 7 <strong>Output:</strong> 28 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> m = 3, n = 2 <strong>Output:</strong> 3 <strong>Explanation:</strong> From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -&gt; Down -&gt; Down 2. Down -&gt; Down -&gt; Right 3. Down -&gt; Right -&gt; Down </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= m, n &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=IlEsdxuD4lY
2-D Dynamic Programming|Longest Common Subsequence|Medium|<div class="elfjS" data-track-load="description_content"><p>Given two strings <code>text1</code> and <code>text2</code>, return <em>the length of their longest <strong>common subsequence</strong>. </em>If there is no <strong>common subsequence</strong>, return <code>0</code>.</p> <p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <ul> 	<li>For example, <code>"ace"</code> is a subsequence of <code>"abcde"</code>.</li> </ul> <p>A <strong>common subsequence</strong> of two strings is a subsequence that is common to both strings.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> text1 = "abcde", text2 = "ace"  <strong>Output:</strong> 3   <strong>Explanation:</strong> The longest common subsequence is "ace" and its length is 3. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> text1 = "abc", text2 = "abc" <strong>Output:</strong> 3 <strong>Explanation:</strong> The longest common subsequence is "abc" and its length is 3. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> text1 = "abc", text2 = "def" <strong>Output:</strong> 0 <strong>Explanation:</strong> There is no such common subsequence, so the result is 0. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> 	<li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li> </ul> </div>|https://www.youtube.com/watch?v=Ua0GhsJSlWM
2-D Dynamic Programming|Best Time to Buy And Sell Stock With Cooldown|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p> <p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p> <ul> 	<li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li> </ul> <p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> prices = [1,2,3,0,2] <strong>Output:</strong> 3 <strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy, sell] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> prices = [1] <strong>Output:</strong> 0 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= prices.length &lt;= 5000</code></li> 	<li><code>0 &lt;= prices[i] &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=I7j0F7AHpb8
2-D Dynamic Programming|Coin Change II|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p> <p>Return <em>the number of combinations that make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>0</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p>The answer is <strong>guaranteed</strong> to fit into a signed <strong>32-bit</strong> integer.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> amount = 5, coins = [1,2,5] <strong>Output:</strong> 4 <strong>Explanation:</strong> there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> amount = 3, coins = [2] <strong>Output:</strong> 0 <strong>Explanation:</strong> the amount of 3 cannot be made up just with coins of 2. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> amount = 10, coins = [10] <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= coins.length &lt;= 300</code></li> 	<li><code>1 &lt;= coins[i] &lt;= 5000</code></li> 	<li>All the values of <code>coins</code> are <strong>unique</strong>.</li> 	<li><code>0 &lt;= amount &lt;= 5000</code></li> </ul> </div>|https://www.youtube.com/watch?v=Mjy4hd2xgrs
2-D Dynamic Programming|Target Sum|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p> <p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>'+'</code> and <code>'-'</code> before each integer in nums and then concatenate all the integers.</p> <ul> 	<li>For example, if <code>nums = [2, 1]</code>, you can add a <code>'+'</code> before <code>2</code> and a <code>'-'</code> before <code>1</code> and concatenate them to build the expression <code>"+2-1"</code>.</li> </ul> <p>Return the number of different <strong>expressions</strong> that you can build, which evaluates to <code>target</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [1,1,1,1,1], target = 3 <strong>Output:</strong> 5 <strong>Explanation:</strong> There are 5 ways to assign symbols to make the sum of nums be target 3. -1 + 1 + 1 + 1 + 1 = 3 +1 - 1 + 1 + 1 + 1 = 3 +1 + 1 - 1 + 1 + 1 = 3 +1 + 1 + 1 - 1 + 1 = 3 +1 + 1 + 1 + 1 - 1 = 3 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1], target = 1 <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 20</code></li> 	<li><code>0 &lt;= nums[i] &lt;= 1000</code></li> 	<li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li> 	<li><code>-1000 &lt;= target &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=g0npyaQtAQM
2-D Dynamic Programming|Interleaving String|Medium|<div class="elfjS" data-track-load="description_content"><p>Given strings <code>s1</code>, <code>s2</code>, and <code>s3</code>, find whether <code>s3</code> is formed by an <strong>interleaving</strong> of <code>s1</code> and <code>s2</code>.</p> <p>An <strong>interleaving</strong> of two strings <code>s</code> and <code>t</code> is a configuration where <code>s</code> and <code>t</code> are divided into <code>n</code> and <code>m</code> <span data-keyword="substring-nonempty" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div>substrings</div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(152px, 264px);"></div></div></div></span> respectively, such that:</p> <ul> 	<li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li> 	<li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li> 	<li><code>\n - m\ &lt;= 1</code></li> 	<li>The <strong>interleaving</strong> is <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> or <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li> </ul> <p><strong>Note:</strong> <code>a + b</code> is the concatenation of strings <code>a</code> and <code>b</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg" style="width: 561px; height: 203px;"> <pre><strong>Input:</strong> s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac" <strong>Output:</strong> true <strong>Explanation:</strong> One way to obtain s3 is: Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a". Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac". Since s3 can be obtained by interleaving s1 and s2, we return true. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc" <strong>Output:</strong> false <strong>Explanation:</strong> Notice how it is impossible to interleave s2 with any other string to obtain s3. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s1 = "", s2 = "", s3 = "" <strong>Output:</strong> true </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li> 	<li><code>0 &lt;= s3.length &lt;= 200</code></li> 	<li><code>s1</code>, <code>s2</code>, and <code>s3</code> consist of lowercase English letters.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> Could you solve it using only <code>O(s2.length)</code> additional memory space?</p> </div>|https://www.youtube.com/watch?v=3Rw3p9LrgvE
2-D Dynamic Programming|Longest Increasing Path In a Matrix|Hard|<div class="elfjS" data-track-load="description_content"><p>Given an <code>m x n</code> integers <code>matrix</code>, return <em>the length of the longest increasing path in </em><code>matrix</code>.</p> <p>From each cell, you can either move in four directions: left, right, up, or down. You <strong>may not</strong> move <strong>diagonally</strong> or move <strong>outside the boundary</strong> (i.e., wrap-around is not allowed).</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg" style="width: 242px; height: 242px;"> <pre><strong>Input:</strong> matrix = [[9,9,4],[6,6,8],[2,1,1]] <strong>Output:</strong> 4 <strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>. </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg" style="width: 253px; height: 253px;"> <pre><strong>Input:</strong> matrix = [[3,4,5],[3,2,6],[2,2,1]] <strong>Output:</strong> 4 <strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> matrix = [[1]] <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == matrix.length</code></li> 	<li><code>n == matrix[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 200</code></li> 	<li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>|https://www.youtube.com/watch?v=wCc_nd-GiEc
2-D Dynamic Programming|Distinct Subsequences|Hard|<div class="elfjS" data-track-load="description_content"><p>Given two strings s and t, return <i>the number of distinct</i> <b><i>subsequences</i></b><i> of </i>s<i> which equals </i>t.</p> <p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "rabbbit", t = "rabbit" <strong>Output:</strong> 3 <strong>Explanation:</strong> As shown below, there are 3 ways you can generate "rabbit" from s. <code><strong><u>rabb</u></strong>b<strong><u>it</u></strong></code> <code><strong><u>ra</u></strong>b<strong><u>bbit</u></strong></code> <code><strong><u>rab</u></strong>b<strong><u>bit</u></strong></code> </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "babgbag", t = "bag" <strong>Output:</strong> 5 <strong>Explanation:</strong> As shown below, there are 5 ways you can generate "bag" from s. <code><strong><u>ba</u></strong>b<u><strong>g</strong></u>bag</code> <code><strong><u>ba</u></strong>bgba<strong><u>g</u></strong></code> <code><u><strong>b</strong></u>abgb<strong><u>ag</u></strong></code> <code>ba<u><strong>b</strong></u>gb<u><strong>ag</strong></u></code> <code>babg<strong><u>bag</u></strong></code></pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li> 	<li><code>s</code> and <code>t</code> consist of English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=-RDzMJ33nx8
2-D Dynamic Programming|Edit Distance|Medium|<div class="elfjS" data-track-load="description_content"><p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p> <p>You have the following three operations permitted on a word:</p> <ul> 	<li>Insert a character</li> 	<li>Delete a character</li> 	<li>Replace a character</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> word1 = "horse", word2 = "ros" <strong>Output:</strong> 3 <strong>Explanation:</strong>  horse -&gt; rorse (replace 'h' with 'r') rorse -&gt; rose (remove 'r') rose -&gt; ros (remove 'e') </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> word1 = "intention", word2 = "execution" <strong>Output:</strong> 5 <strong>Explanation:</strong>  intention -&gt; inention (remove 't') inention -&gt; enention (replace 'i' with 'e') enention -&gt; exention (replace 'n' with 'x') exention -&gt; exection (replace 'n' with 'c') exection -&gt; execution (insert 'u') </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li> 	<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=XYi2-LPrwm4
2-D Dynamic Programming|Burst Balloons|Hard|<div class="elfjS" data-track-load="description_content"><p>You are given <code>n</code> balloons, indexed from <code>0</code> to <code>n - 1</code>. Each balloon is painted with a number on it represented by an array <code>nums</code>. You are asked to burst all the balloons.</p> <p>If you burst the <code>i<sup>th</sup></code> balloon, you will get <code>nums[i - 1] * nums[i] * nums[i + 1]</code> coins. If <code>i - 1</code> or <code>i + 1</code> goes out of bounds of the array, then treat it as if there is a balloon with a <code>1</code> painted on it.</p> <p>Return <em>the maximum coins you can collect by bursting the balloons wisely</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [3,1,5,8] <strong>Output:</strong> 167 <strong>Explanation:</strong> nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; [] coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167</pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1,5] <strong>Output:</strong> 10 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == nums.length</code></li> 	<li><code>1 &lt;= n &lt;= 300</code></li> 	<li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=VFskby7lUbw
2-D Dynamic Programming|Regular Expression Matching|Hard|<div class="elfjS" data-track-load="description_content"><p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:</p> <ul> 	<li><code>'.'</code> Matches any single character.​​​​</li> 	<li><code>'*'</code> Matches zero or more of the preceding element.</li> </ul> <p>The matching should cover the <strong>entire</strong> input string (not partial).</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "aa", p = "a" <strong>Output:</strong> false <strong>Explanation:</strong> "a" does not match the entire string "aa". </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "aa", p = "a*" <strong>Output:</strong> true <strong>Explanation:</strong> '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa". </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = "ab", p = ".*" <strong>Output:</strong> true <strong>Explanation:</strong> ".*" means "zero or more (*) of any character (.)". </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li> 	<li><code>1 &lt;= p.length&nbsp;&lt;= 20</code></li> 	<li><code>s</code> contains only lowercase English letters.</li> 	<li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and&nbsp;<code>'*'</code>.</li> 	<li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li> </ul> </div>|https://www.youtube.com/watch?v=HAA8mgxlov8
Greedy|Maximum Subarray|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an integer array <code>nums</code>, find the <span data-keyword="subarray-nonempty" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div>subarray</div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(296px, 185px);"></div></div></div></span> with the largest sum, and return <em>its sum</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4] <strong>Output:</strong> 6 <strong>Explanation:</strong> The subarray [4,-1,2,1] has the largest sum 6. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [1] <strong>Output:</strong> 1 <strong>Explanation:</strong> The subarray [1] has the largest sum 1. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [5,4,-1,7,8] <strong>Output:</strong> 23 <strong>Explanation:</strong> The subarray [5,4,-1,7,8] has the largest sum 23. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> 	<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p> </div>|https://www.youtube.com/watch?v=5WZl3MMT0Eg
Greedy|Jump Game|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an integer array <code>nums</code>. You are initially positioned at the array's <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p> <p>Return <code>true</code><em> if you can reach the last index, or </em><code>false</code><em> otherwise</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [2,3,1,1,4] <strong>Output:</strong> true <strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [3,2,1,0,4] <strong>Output:</strong> false <strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=Yan0cv2cLy8
Greedy|Jump Game II|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p> <p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p> <ul> 	<li><code>0 &lt;= j &lt;= nums[i]</code> and</li> 	<li><code>i + j &lt; n</code></li> </ul> <p>Return <em>the minimum number of jumps to reach </em><code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [2,3,1,1,4] <strong>Output:</strong> 2 <strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [2,3,0,1,4] <strong>Output:</strong> 2 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= nums[i] &lt;= 1000</code></li> 	<li>It's guaranteed that you can reach <code>nums[n - 1]</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=dJ7sWiOoK7g
Greedy|Gas Station|Medium|<div class="elfjS" data-track-load="description_content"><p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>i<sup>th</sup></code> station is <code>gas[i]</code>.</p> <p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>i<sup>th</sup></code> station to its next <code>(i + 1)<sup>th</sup></code> station. You begin the journey with an empty tank at one of the gas stations.</p> <p>Given two integer arrays <code>gas</code> and <code>cost</code>, return <em>the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return</em> <code>-1</code>. If there exists a solution, it is <strong>guaranteed</strong> to be <strong>unique</strong></p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> gas = [1,2,3,4,5], cost = [3,4,5,1,2] <strong>Output:</strong> 3 <strong>Explanation:</strong> Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> gas = [2,3,4], cost = [3,4,3] <strong>Output:</strong> -1 <strong>Explanation:</strong> You can't start at station 0 or 1, as there is not enough gas to travel to the next station. Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 0. Your tank = 4 - 3 + 2 = 3 Travel to station 1. Your tank = 3 - 3 + 3 = 3 You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. Therefore, you can't travel around the circuit once no matter where you start. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == gas.length == cost.length</code></li> 	<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> 	<li><code>0 &lt;= gas[i], cost[i] &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=lJwbPZGo05A
Greedy|Hand of Straights|Medium|<div class="elfjS" data-track-load="description_content"><p>Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size <code>groupSize</code>, and consists of <code>groupSize</code> consecutive cards.</p> <p>Given an integer array <code>hand</code> where <code>hand[i]</code> is the value written on the <code>i<sup>th</sup></code> card and an integer <code>groupSize</code>, return <code>true</code> if she can rearrange the cards, or <code>false</code> otherwise.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> hand = [1,2,3,6,2,3,4,7,8], groupSize = 3 <strong>Output:</strong> true <strong>Explanation:</strong> Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> hand = [1,2,3,4,5], groupSize = 4 <strong>Output:</strong> false <strong>Explanation:</strong> Alice's hand can not be rearranged into groups of 4. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= hand.length &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= hand[i] &lt;= 10<sup>9</sup></code></li> 	<li><code>1 &lt;= groupSize &lt;= hand.length</code></li> </ul> <p>&nbsp;</p> <p><strong>Note:</strong> This question is the same as 1296: <a href="https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/" target="_blank">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p> </div>|https://www.youtube.com/watch?v=amnrMCVd2YI
Greedy|Merge Triplets to Form Target Triplet|Medium|<div class="elfjS" data-track-load="description_content"><p>A <strong>triplet</strong> is an array of three integers. You are given a 2D integer array <code>triplets</code>, where <code>triplets[i] = [a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>]</code> describes the <code>i<sup>th</sup></code> <strong>triplet</strong>. You are also given an integer array <code>target = [x, y, z]</code> that describes the <strong>triplet</strong> you want to obtain.</p> <p>To obtain <code>target</code>, you may apply the following operation on <code>triplets</code> <strong>any number</strong> of times (possibly <strong>zero</strong>):</p> <ul> 	<li>Choose two indices (<strong>0-indexed</strong>) <code>i</code> and <code>j</code> (<code>i != j</code>) and <strong>update</strong> <code>triplets[j]</code> to become <code>[max(a<sub>i</sub>, a<sub>j</sub>), max(b<sub>i</sub>, b<sub>j</sub>), max(c<sub>i</sub>, c<sub>j</sub>)]</code>. 	<ul> 		<li>For example, if <code>triplets[i] = [2, 5, 3]</code> and <code>triplets[j] = [1, 7, 5]</code>, <code>triplets[j]</code> will be updated to <code>[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]</code>.</li> 	</ul> 	</li> </ul> <p>Return <code>true</code> <em>if it is possible to obtain the </em><code>target</code><em> <strong>triplet</strong> </em><code>[x, y, z]</code><em> as an<strong> element</strong> of </em><code>triplets</code><em>, or </em><code>false</code><em> otherwise</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5] <strong>Output:</strong> true <strong>Explanation:</strong> Perform the following operations: - Choose the first and last triplets [<u>[2,5,3]</u>,[1,8,4],<u>[1,7,5]</u>]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],<u>[2,7,5]</u>] The target triplet [2,7,5] is now an element of triplets. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> triplets = [[3,4,5],[4,5,6]], target = [3,2,5] <strong>Output:</strong> false <strong>Explanation:</strong> It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5] <strong>Output:</strong> true <strong>Explanation: </strong>Perform the following operations: - Choose the first and third triplets [<u>[2,5,3]</u>,[2,3,4],<u>[1,2,5]</u>,[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],<u>[2,5,5]</u>,[5,2,3]]. - Choose the third and fourth triplets [[2,5,3],[2,3,4],<u>[2,5,5]</u>,<u>[5,2,3]</u>]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],<u>[5,5,5]</u>]. The target triplet [5,5,5] is now an element of triplets. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= triplets.length &lt;= 10<sup>5</sup></code></li> 	<li><code>triplets[i].length == target.length == 3</code></li> 	<li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, x, y, z &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=kShkQLQZ9K4
Greedy|Partition Labels|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part.</p> <p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p> <p>Return <em>a list of integers representing the size of these parts</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "ababcbacadefegdehijhklij" <strong>Output:</strong> [9,7,8] <strong>Explanation:</strong> The partition is "ababcbaca", "defegde", "hijhklij". This is a partition so that each letter appears in at most one part. A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "eccbbbbdec" <strong>Output:</strong> [10] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 500</code></li> 	<li><code>s</code> consists of lowercase English letters.</li> </ul> </div>|https://www.youtube.com/watch?v=B7m8UmZE-vw
Greedy|Valid Parenthesis String|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a string <code>s</code> containing only three types of characters: <code>'('</code>, <code>')'</code> and <code>'*'</code>, return <code>true</code> <em>if</em> <code>s</code> <em>is <strong>valid</strong></em>.</p> <p>The following rules define a <strong>valid</strong> string:</p> <ul> 	<li>Any left parenthesis <code>'('</code> must have a corresponding right parenthesis <code>')'</code>.</li> 	<li>Any right parenthesis <code>')'</code> must have a corresponding left parenthesis <code>'('</code>.</li> 	<li>Left parenthesis <code>'('</code> must go before the corresponding right parenthesis <code>')'</code>.</li> 	<li><code>'*'</code> could be treated as a single right parenthesis <code>')'</code> or a single left parenthesis <code>'('</code> or an empty string <code>""</code>.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> s = "()" <strong>Output:</strong> true </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> s = "(*)" <strong>Output:</strong> true </pre><p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> s = "(*))" <strong>Output:</strong> true </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= s.length &lt;= 100</code></li> 	<li><code>s[i]</code> is <code>'('</code>, <code>')'</code> or <code>'*'</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=QhPdNS143Qg
Intervals|Insert Interval|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an array of non-overlapping intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represent the start and the end of the <code>i<sup>th</sup></code> interval and <code>intervals</code> is sorted in ascending order by <code>start<sub>i</sub></code>. You are also given an interval <code>newInterval = [start, end]</code> that represents the start and end of another interval.</p> <p>Insert <code>newInterval</code> into <code>intervals</code> such that <code>intervals</code> is still sorted in ascending order by <code>start<sub>i</sub></code> and <code>intervals</code> still does not have any overlapping intervals (merge overlapping intervals if necessary).</p> <p>Return <code>intervals</code><em> after the insertion</em>.</p> <p><strong>Note</strong> that you don't need to modify <code>intervals</code> in-place. You can make a new array and return it.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5] <strong>Output:</strong> [[1,5],[6,9]] </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] <strong>Output:</strong> [[1,2],[3,10],[12,16]] <strong>Explanation:</strong> Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> 	<li><code>intervals[i].length == 2</code></li> 	<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup></code></li> 	<li><code>intervals</code> is sorted by <code>start<sub>i</sub></code> in <strong>ascending</strong> order.</li> 	<li><code>newInterval.length == 2</code></li> 	<li><code>0 &lt;= start &lt;= end &lt;= 10<sup>5</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=A8NUOmlwOlM
Intervals|Merge Intervals|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]] <strong>Output:</strong> [[1,6],[8,10],[15,18]] <strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> intervals = [[1,4],[4,5]] <strong>Output:</strong> [[1,5]] <strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> 	<li><code>intervals[i].length == 2</code></li> 	<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=44H3cEC2fFM
Intervals|Non Overlapping Intervals|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]] <strong>Output:</strong> 1 <strong>Explanation:</strong> [1,3] can be removed and the rest of the intervals are non-overlapping. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> intervals = [[1,2],[1,2],[1,2]] <strong>Output:</strong> 2 <strong>Explanation:</strong> You need to remove two [1,2] to make the rest of the intervals non-overlapping. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> intervals = [[1,2],[2,3]] <strong>Output:</strong> 0 <strong>Explanation:</strong> You don't need to remove any of the intervals since they're already non-overlapping. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li> 	<li><code>intervals[i].length == 2</code></li> 	<li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=nONCGxWoUfM
Intervals|Meeting Rooms|Easy|<div class="elfjS" data-track-load="description_content"></div>|https://www.youtube.com/watch?v=PaJxqZVPhbg
Intervals|Meeting Rooms II|Medium|<div class="elfjS" data-track-load="description_content"></div>|https://www.youtube.com/watch?v=FdzJmTCVyJU
Intervals|Minimum Interval to Include Each Query|Hard|<div class="elfjS" data-track-load="description_content"><p>You are given a 2D integer array <code>intervals</code>, where <code>intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> describes the <code>i<sup>th</sup></code> interval starting at <code>left<sub>i</sub></code> and ending at <code>right<sub>i</sub></code> <strong>(inclusive)</strong>. The <strong>size</strong> of an interval is defined as the number of integers it contains, or more formally <code>right<sub>i</sub> - left<sub>i</sub> + 1</code>.</p> <p>You are also given an integer array <code>queries</code>. The answer to the <code>j<sup>th</sup></code> query is the <strong>size of the smallest interval</strong> <code>i</code> such that <code>left<sub>i</sub> &lt;= queries[j] &lt;= right<sub>i</sub></code>. If no such interval exists, the answer is <code>-1</code>.</p> <p>Return <em>an array containing the answers to the queries</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5] <strong>Output:</strong> [3,3,1,4] <strong>Explanation:</strong> The queries are processed as follows: - Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3. - Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3. - Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1. - Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22] <strong>Output:</strong> [2,-1,4,6] <strong>Explanation:</strong> The queries are processed as follows: - Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2. - Query = 19: None of the intervals contain 19. The answer is -1. - Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4. - Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li> 	<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> 	<li><code>intervals[i].length == 2</code></li> 	<li><code>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>7</sup></code></li> 	<li><code>1 &lt;= queries[j] &lt;= 10<sup>7</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=5hQ5WWW5awQ
Math & Geometry|Rotate Image|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).</p> <p>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg" style="width: 500px; height: 188px;"> <pre><strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]] <strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg" style="width: 500px; height: 201px;"> <pre><strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] <strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == matrix.length == matrix[i].length</code></li> 	<li><code>1 &lt;= n &lt;= 20</code></li> 	<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=fMSJSS7eO1w
Math & Geometry|Spiral Matrix|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" style="width: 242px; height: 242px;"> <pre><strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]] <strong>Output:</strong> [1,2,3,6,9,8,7,4,5] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" style="width: 322px; height: 242px;"> <pre><strong>Input:</strong> matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] <strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == matrix.length</code></li> 	<li><code>n == matrix[i].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 10</code></li> 	<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> </ul> </div>|https://www.youtube.com/watch?v=BJnMZNwUk1M
Math & Geometry|Set Matrix Zeroes|Medium|<div class="elfjS" data-track-load="description_content"><p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>'s.</p> <p>You must do it <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank">in place</a>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg" style="width: 450px; height: 169px;"> <pre><strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]] <strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]] </pre> <p><strong class="example">Example 2:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg" style="width: 450px; height: 137px;"> <pre><strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] <strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]] </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>m == matrix.length</code></li> 	<li><code>n == matrix[0].length</code></li> 	<li><code>1 &lt;= m, n &lt;= 200</code></li> 	<li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong></p> <ul> 	<li>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li> 	<li>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li> 	<li>Could you devise a constant space solution?</li> </ul> </div>|https://www.youtube.com/watch?v=T41rL0L3Pnw
Math & Geometry|Happy Number|Easy|<div class="elfjS" data-track-load="description_content"><p>Write an algorithm to determine if a number <code>n</code> is happy.</p> <p>A <strong>happy number</strong> is a number defined by the following process:</p> <ul> 	<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> 	<li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li> 	<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li> </ul> <p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> n = 19 <strong>Output:</strong> true <strong>Explanation:</strong> 1<sup>2</sup> + 9<sup>2</sup> = 82 8<sup>2</sup> + 2<sup>2</sup> = 68 6<sup>2</sup> + 8<sup>2</sup> = 100 1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> n = 2 <strong>Output:</strong> false </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>|https://www.youtube.com/watch?v=ljz85bxOYJ0
Math & Geometry|Plus One|Easy|<div class="elfjS" data-track-load="description_content"><p>You are given a <strong>large integer</strong> represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>i<sup>th</sup></code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0</code>'s.</p> <p>Increment the large integer by one and return <em>the resulting array of digits</em>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> digits = [1,2,3] <strong>Output:</strong> [1,2,4] <strong>Explanation:</strong> The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4]. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> digits = [4,3,2,1] <strong>Output:</strong> [4,3,2,2] <strong>Explanation:</strong> The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2]. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> digits = [9] <strong>Output:</strong> [1,0] <strong>Explanation:</strong> The array represents the integer 9. Incrementing by one gives 9 + 1 = 10. Thus, the result should be [1,0]. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= digits.length &lt;= 100</code></li> 	<li><code>0 &lt;= digits[i] &lt;= 9</code></li> 	<li><code>digits</code> does not contain any leading <code>0</code>'s.</li> </ul> </div>|https://www.youtube.com/watch?v=jIaA8boiG1s
Math & Geometry|Pow(x, n)|Medium|<div class="elfjS" data-track-load="description_content"><p>Implement <a href="http://www.cplusplus.com/reference/valarray/pow/" target="_blank">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> x = 2.00000, n = 10 <strong>Output:</strong> 1024.00000 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> x = 2.10000, n = 3 <strong>Output:</strong> 9.26100 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> x = 2.00000, n = -2 <strong>Output:</strong> 0.25000 <strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>-100.0 &lt; x &lt; 100.0</code></li> 	<li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li> 	<li><code>n</code> is an integer.</li> 	<li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li> 	<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li> </ul> </div>|https://www.youtube.com/watch?v=g9YQyYi4IQQ
Math & Geometry|Multiply Strings|Medium|<div class="elfjS" data-track-load="description_content"><p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p> <p><strong>Note:</strong>&nbsp;You must not use any built-in BigInteger library or convert the inputs to integer directly.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> num1 = "2", num2 = "3" <strong>Output:</strong> "6" </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> num1 = "123", num2 = "456" <strong>Output:</strong> "56088" </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li> 	<li><code>num1</code> and <code>num2</code> consist of digits only.</li> 	<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number <code>0</code> itself.</li> </ul> </div>|https://www.youtube.com/watch?v=1vZswirL8Y8
Math & Geometry|Detect Squares|Medium|<div class="elfjS" data-track-load="description_content"><p>You are given a stream of points on the X-Y plane. Design an algorithm that:</p> <ul> 	<li><strong>Adds</strong> new points from the stream into a data structure. <strong>Duplicate</strong> points are allowed and should be treated as different points.</li> 	<li>Given a query point, <strong>counts</strong> the number of ways to choose three points from the data structure such that the three points and the query point form an <strong>axis-aligned square</strong> with <strong>positive area</strong>.</li> </ul> <p>An <strong>axis-aligned square</strong> is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.</p> <p>Implement the <code>DetectSquares</code> class:</p> <ul> 	<li><code>DetectSquares()</code> Initializes the object with an empty data structure.</li> 	<li><code>void add(int[] point)</code> Adds a new point <code>point = [x, y]</code> to the data structure.</li> 	<li><code>int count(int[] point)</code> Counts the number of ways to form <strong>axis-aligned squares</strong> with point <code>point = [x, y]</code> as described above.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <img alt="" src="https://assets.leetcode.com/uploads/2021/09/01/image.png" style="width: 869px; height: 504px;"> <pre><strong>Input</strong> ["DetectSquares", "add", "add", "add", "count", "count", "add", "count"] [[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]] <strong>Output</strong> [null, null, null, null, 1, 0, null, 2] <strong>Explanation</strong> DetectSquares detectSquares = new DetectSquares(); detectSquares.add([3, 10]); detectSquares.add([11, 2]); detectSquares.add([3, 2]); detectSquares.count([11, 10]); // return 1. You can choose:                                //   - The first, second, and third points detectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure. detectSquares.add([11, 2]);    // Adding duplicate points is allowed. detectSquares.count([11, 10]); // return 2. You can choose:                                //   - The first, second, and third points                                //   - The first, third, and fourth points </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>point.length == 2</code></li> 	<li><code>0 &lt;= x, y &lt;= 1000</code></li> 	<li>At most <code>3000</code> calls <strong>in total</strong> will be made to <code>add</code> and <code>count</code>.</li> </ul> </div>|https://www.youtube.com/watch?v=bahebearrDc
Bit Manipulation|Single Number|Easy|<div class="elfjS" data-track-load="description_content"><p>Given a <strong>non-empty</strong>&nbsp;array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.</p> <p>You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [2,2,1] <strong>Output:</strong> 1 </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [4,1,2,1,2] <strong>Output:</strong> 4 </pre><p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [1] <strong>Output:</strong> 1 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> 	<li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li> 	<li>Each element in the array appears twice except for one element which appears only once.</li> </ul> </div>|https://www.youtube.com/watch?v=qMPX1AOa83k
Bit Manipulation|Number of 1 Bits|Easy|<div class="elfjS" data-track-load="description_content"><p>Write a function that takes the binary representation of a positive integer and returns the number of <span data-keyword="set-bit" class=" cursor-pointer relative text-dark-blue-s text-sm"><div class="popover-wrapper inline-block" data-headlessui-state=""><div><div aria-expanded="false" data-headlessui-state="" id="headlessui-popover-button-:rj:"><div>set bits</div></div><div style="position: fixed; z-index: 40; inset: 0px auto auto 0px; transform: translate(145px, 206px);"></div></div></div></span> it has (also known as the <a href="http://en.wikipedia.org/wiki/Hamming_weight" target="_blank">Hamming weight</a>).</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <div class="example-block"> <p><strong>Input:</strong> <span class="example-io">n = 11</span></p> <p><strong>Output:</strong> <span class="example-io">3</span></p> <p><strong>Explanation:</strong></p> <p>The input binary string <strong>1011</strong> has a total of three set bits.</p> </div> <p><strong class="example">Example 2:</strong></p> <div class="example-block"> <p><strong>Input:</strong> <span class="example-io">n = 128</span></p> <p><strong>Output:</strong> <span class="example-io">1</span></p> <p><strong>Explanation:</strong></p> <p>The input binary string <strong>10000000</strong> has a total of one set bit.</p> </div> <p><strong class="example">Example 3:</strong></p> <div class="example-block"> <p><strong>Input:</strong> <span class="example-io">n = 2147483645</span></p> <p><strong>Output:</strong> <span class="example-io">30</span></p> <p><strong>Explanation:</strong></p> <p>The input binary string <strong>1111111111111111111111111111101</strong> has a total of thirty set bits.</p> </div> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>1 &lt;= n&nbsp;&lt;= 2<sup>31</sup>&nbsp;- 1</code></li> </ul> <p>&nbsp;</p> <strong>Follow up:</strong> If this function is called many times, how would you optimize it?</div>|https://www.youtube.com/watch?v=5Km3utixwZs
Bit Manipulation|Counting Bits|Easy|<div class="elfjS" data-track-load="description_content"><p>Given an integer <code>n</code>, return <em>an array </em><code>ans</code><em> of length </em><code>n + 1</code><em> such that for each </em><code>i</code><em> </em>(<code>0 &lt;= i &lt;= n</code>)<em>, </em><code>ans[i]</code><em> is the <strong>number of </strong></em><code>1</code><em><strong>'s</strong> in the binary representation of </em><code>i</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> n = 2 <strong>Output:</strong> [0,1,1] <strong>Explanation:</strong> 0 --&gt; 0 1 --&gt; 1 2 --&gt; 10 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> n = 5 <strong>Output:</strong> [0,1,1,2,1,2] <strong>Explanation:</strong> 0 --&gt; 0 1 --&gt; 1 2 --&gt; 10 3 --&gt; 11 4 --&gt; 100 5 --&gt; 101 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong></p> <ul> 	<li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li> 	<li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li> </ul> </div>|https://www.youtube.com/watch?v=RyBM56RIWrM
Bit Manipulation|Reverse Bits|Easy|<div class="elfjS" data-track-load="description_content"><p>Reverse bits of a given 32 bits unsigned integer.</p> <p><strong>Note:</strong></p> <ul> 	<li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li> 	<li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank">2's complement notation</a>. Therefore, in <strong class="example">Example 2</strong> above, the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li> </ul> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> n = 00000010100101000001111010011100 <strong>Output:</strong>    964176192 (00111001011110000010100101000000) <strong>Explanation: </strong>The input binary string <strong>00000010100101000001111010011100</strong> represents the unsigned integer 43261596, so return 964176192 which its binary representation is <strong>00111001011110000010100101000000</strong>. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> n = 11111111111111111111111111111101 <strong>Output:</strong>   3221225471 (10111111111111111111111111111111) <strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is <strong>10111111111111111111111111111111</strong>. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li>The input must be a <strong>binary string</strong> of length <code>32</code></li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> If this function is called many times, how would you optimize it?</p> </div>|https://www.youtube.com/watch?v=UcoN6UjAI64
Bit Manipulation|Missing Number|Easy|<div class="elfjS" data-track-load="description_content"><p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return <em>the only number in the range that is missing from the array.</em></p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> nums = [3,0,1] <strong>Output:</strong> 2 <strong>Explanation:</strong> n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> nums = [0,1] <strong>Output:</strong> 2 <strong>Explanation:</strong> n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> nums = [9,6,4,2,3,5,7,0,1] <strong>Output:</strong> 8 <strong>Explanation:</strong> n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>n == nums.length</code></li> 	<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> 	<li><code>0 &lt;= nums[i] &lt;= n</code></li> 	<li>All the numbers of <code>nums</code> are <strong>unique</strong>.</li> </ul> <p>&nbsp;</p> <p><strong>Follow up:</strong> Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p> </div>|https://www.youtube.com/watch?v=WnPLSRLSANE
Bit Manipulation|Sum of Two Integers|Medium|<div class="elfjS" data-track-load="description_content"><p>Given two integers <code>a</code> and <code>b</code>, return <em>the sum of the two integers without using the operators</em> <code>+</code> <em>and</em> <code>-</code>.</p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> a = 1, b = 2 <strong>Output:</strong> 3 </pre><p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> a = 2, b = 3 <strong>Output:</strong> 5 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>-1000 &lt;= a, b &lt;= 1000</code></li> </ul> </div>|https://www.youtube.com/watch?v=gVUrDV4tZfY
Bit Manipulation|Reverse Integer|Medium|<div class="elfjS" data-track-load="description_content"><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p> <p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p> <p>&nbsp;</p> <p><strong class="example">Example 1:</strong></p> <pre><strong>Input:</strong> x = 123 <strong>Output:</strong> 321 </pre> <p><strong class="example">Example 2:</strong></p> <pre><strong>Input:</strong> x = -123 <strong>Output:</strong> -321 </pre> <p><strong class="example">Example 3:</strong></p> <pre><strong>Input:</strong> x = 120 <strong>Output:</strong> 21 </pre> <p>&nbsp;</p> <p><strong>Constraints:</strong></p> <ul> 	<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> </ul> </div>|https://www.youtube.com/watch?v=HAgLH58IgJQ